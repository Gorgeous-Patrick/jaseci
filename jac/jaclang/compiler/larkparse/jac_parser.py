# The file was automatically generated by Lark v1.2.2
__version__ = "1.2.2"

#
#
#   Lark Stand-alone Generator Tool
# ----------------------------------
# Generates a stand-alone LALR(1) parser
#
# Git:    https://github.com/erezsh/lark
# Author: Erez Shinan (erezshin@gmail.com)
#
#
#    >>> LICENSE
#
#    This tool and its generated code use a separate license from Lark,
#    and are subject to the terms of the Mozilla Public License, v. 2.0.
#    If a copy of the MPL was not distributed with this
#    file, You can obtain one at https://mozilla.org/MPL/2.0/.
#
#    If you wish to purchase a commercial license for this tool and its
#    generated code, you may contact me via email or otherwise.
#
#    If MPL2 is incompatible with your free or open-source project,
#    contact me and we'll work it out.
#
#

from copy import deepcopy
from abc import ABC, abstractmethod
from types import ModuleType
from typing import (
    TypeVar, Generic, Type, Tuple, List, Dict, Iterator, Collection, Callable, Optional, FrozenSet, Any,
    Union, Iterable, IO, TYPE_CHECKING, overload, Sequence,
    Pattern as REPattern, ClassVar, Set, Mapping
)


class LarkError(Exception):
    pass


class ConfigurationError(LarkError, ValueError):
    pass


def assert_config(value, options: Collection, msg='Got %r, expected one of %s'):
    if value not in options:
        raise ConfigurationError(msg % (value, options))


class GrammarError(LarkError):
    pass


class ParseError(LarkError):
    pass


class LexError(LarkError):
    pass

T = TypeVar('T')

class UnexpectedInput(LarkError):
    #--
    line: int
    column: int
    pos_in_stream = None
    state: Any
    _terminals_by_name = None
    interactive_parser: 'InteractiveParser'

    def get_context(self, text: str, span: int=40) -> str:
        #--
        assert self.pos_in_stream is not None, self
        pos = self.pos_in_stream
        start = max(pos - span, 0)
        end = pos + span
        if not isinstance(text, bytes):
            before = text[start:pos].rsplit('\n', 1)[-1]
            after = text[pos:end].split('\n', 1)[0]
            return before + after + '\n' + ' ' * len(before.expandtabs()) + '^\n'
        else:
            before = text[start:pos].rsplit(b'\n', 1)[-1]
            after = text[pos:end].split(b'\n', 1)[0]
            return (before + after + b'\n' + b' ' * len(before.expandtabs()) + b'^\n').decode("ascii", "backslashreplace")

    def match_examples(self, parse_fn: 'Callable[[str], Tree]',
                             examples: Union[Mapping[T, Iterable[str]], Iterable[Tuple[T, Iterable[str]]]],
                             token_type_match_fallback: bool=False,
                             use_accepts: bool=True
                         ) -> Optional[T]:
        #--
        assert self.state is not None, "Not supported for this exception"

        if isinstance(examples, Mapping):
            examples = examples.items()

        candidate = (None, False)
        for i, (label, example) in enumerate(examples):
            assert not isinstance(example, str), "Expecting a list"

            for j, malformed in enumerate(example):
                try:
                    parse_fn(malformed)
                except UnexpectedInput as ut:
                    if ut.state == self.state:
                        if (
                            use_accepts
                            and isinstance(self, UnexpectedToken)
                            and isinstance(ut, UnexpectedToken)
                            and ut.accepts != self.accepts
                        ):
                            logger.debug("Different accepts with same state[%d]: %s != %s at example [%s][%s]" %
                                         (self.state, self.accepts, ut.accepts, i, j))
                            continue
                        if (
                            isinstance(self, (UnexpectedToken, UnexpectedEOF))
                            and isinstance(ut, (UnexpectedToken, UnexpectedEOF))
                        ):
                            if ut.token == self.token:  ##

                                logger.debug("Exact Match at example [%s][%s]" % (i, j))
                                return label

                            if token_type_match_fallback:
                                ##

                                if (ut.token.type == self.token.type) and not candidate[-1]:
                                    logger.debug("Token Type Fallback at example [%s][%s]" % (i, j))
                                    candidate = label, True

                        if candidate[0] is None:
                            logger.debug("Same State match at example [%s][%s]" % (i, j))
                            candidate = label, False

        return candidate[0]

    def _format_expected(self, expected):
        if self._terminals_by_name:
            d = self._terminals_by_name
            expected = [d[t_name].user_repr() if t_name in d else t_name for t_name in expected]
        return "Expected one of: \n\t* %s\n" % '\n\t* '.join(expected)


class UnexpectedEOF(ParseError, UnexpectedInput):
    #--
    expected: 'List[Token]'

    def __init__(self, expected, state=None, terminals_by_name=None):
        super(UnexpectedEOF, self).__init__()

        self.expected = expected
        self.state = state
        from .lexer import Token
        self.token = Token("<EOF>", "")  ##

        self.pos_in_stream = -1
        self.line = -1
        self.column = -1
        self._terminals_by_name = terminals_by_name


    def __str__(self):
        message = "Unexpected end-of-input. "
        message += self._format_expected(self.expected)
        return message


class UnexpectedCharacters(LexError, UnexpectedInput):
    #--

    allowed: Set[str]
    considered_tokens: Set[Any]

    def __init__(self, seq, lex_pos, line, column, allowed=None, considered_tokens=None, state=None, token_history=None,
                 terminals_by_name=None, considered_rules=None):
        super(UnexpectedCharacters, self).__init__()

        ##

        self.line = line
        self.column = column
        self.pos_in_stream = lex_pos
        self.state = state
        self._terminals_by_name = terminals_by_name

        self.allowed = allowed
        self.considered_tokens = considered_tokens
        self.considered_rules = considered_rules
        self.token_history = token_history

        if isinstance(seq, bytes):
            self.char = seq[lex_pos:lex_pos + 1].decode("ascii", "backslashreplace")
        else:
            self.char = seq[lex_pos]
        self._context = self.get_context(seq)


    def __str__(self):
        message = "No terminal matches '%s' in the current parser context, at line %d col %d" % (self.char, self.line, self.column)
        message += '\n\n' + self._context
        if self.allowed:
            message += self._format_expected(self.allowed)
        if self.token_history:
            message += '\nPrevious tokens: %s\n' % ', '.join(repr(t) for t in self.token_history)
        return message


class UnexpectedToken(ParseError, UnexpectedInput):
    #--

    expected: Set[str]
    considered_rules: Set[str]

    def __init__(self, token, expected, considered_rules=None, state=None, interactive_parser=None, terminals_by_name=None, token_history=None):
        super(UnexpectedToken, self).__init__()

        ##

        self.line = getattr(token, 'line', '?')
        self.column = getattr(token, 'column', '?')
        self.pos_in_stream = getattr(token, 'start_pos', None)
        self.state = state

        self.token = token
        self.expected = expected  ##

        self._accepts = NO_VALUE
        self.considered_rules = considered_rules
        self.interactive_parser = interactive_parser
        self._terminals_by_name = terminals_by_name
        self.token_history = token_history


    @property
    def accepts(self) -> Set[str]:
        if self._accepts is NO_VALUE:
            self._accepts = self.interactive_parser and self.interactive_parser.accepts()
        return self._accepts

    def __str__(self):
        message = ("Unexpected token %r at line %s, column %s.\n%s"
                   % (self.token, self.line, self.column, self._format_expected(self.accepts or self.expected)))
        if self.token_history:
            message += "Previous tokens: %r\n" % self.token_history

        return message



class VisitError(LarkError):
    #--

    obj: 'Union[Tree, Token]'
    orig_exc: Exception

    def __init__(self, rule, obj, orig_exc):
        message = 'Error trying to process rule "%s":\n\n%s' % (rule, orig_exc)
        super(VisitError, self).__init__(message)

        self.rule = rule
        self.obj = obj
        self.orig_exc = orig_exc


class MissingVariableError(LarkError):
    pass


import sys, re
import logging

logger: logging.Logger = logging.getLogger("lark")
logger.addHandler(logging.StreamHandler())
##

##

logger.setLevel(logging.CRITICAL)


NO_VALUE = object()

T = TypeVar("T")


def classify(seq: Iterable, key: Optional[Callable] = None, value: Optional[Callable] = None) -> Dict:
    d: Dict[Any, Any] = {}
    for item in seq:
        k = key(item) if (key is not None) else item
        v = value(item) if (value is not None) else item
        try:
            d[k].append(v)
        except KeyError:
            d[k] = [v]
    return d


def _deserialize(data: Any, namespace: Dict[str, Any], memo: Dict) -> Any:
    if isinstance(data, dict):
        if '__type__' in data:  ##

            class_ = namespace[data['__type__']]
            return class_.deserialize(data, memo)
        elif '@' in data:
            return memo[data['@']]
        return {key:_deserialize(value, namespace, memo) for key, value in data.items()}
    elif isinstance(data, list):
        return [_deserialize(value, namespace, memo) for value in data]
    return data


_T = TypeVar("_T", bound="Serialize")

class Serialize:
    #--

    def memo_serialize(self, types_to_memoize: List) -> Any:
        memo = SerializeMemoizer(types_to_memoize)
        return self.serialize(memo), memo.serialize()

    def serialize(self, memo = None) -> Dict[str, Any]:
        if memo and memo.in_types(self):
            return {'@': memo.memoized.get(self)}

        fields = getattr(self, '__serialize_fields__')
        res = {f: _serialize(getattr(self, f), memo) for f in fields}
        res['__type__'] = type(self).__name__
        if hasattr(self, '_serialize'):
            self._serialize(res, memo)
        return res

    @classmethod
    def deserialize(cls: Type[_T], data: Dict[str, Any], memo: Dict[int, Any]) -> _T:
        namespace = getattr(cls, '__serialize_namespace__', [])
        namespace = {c.__name__:c for c in namespace}

        fields = getattr(cls, '__serialize_fields__')

        if '@' in data:
            return memo[data['@']]

        inst = cls.__new__(cls)
        for f in fields:
            try:
                setattr(inst, f, _deserialize(data[f], namespace, memo))
            except KeyError as e:
                raise KeyError("Cannot find key for class", cls, e)

        if hasattr(inst, '_deserialize'):
            inst._deserialize()

        return inst


class SerializeMemoizer(Serialize):
    #--

    __serialize_fields__ = 'memoized',

    def __init__(self, types_to_memoize: List) -> None:
        self.types_to_memoize = tuple(types_to_memoize)
        self.memoized = Enumerator()

    def in_types(self, value: Serialize) -> bool:
        return isinstance(value, self.types_to_memoize)

    def serialize(self) -> Dict[int, Any]:  ##

        return _serialize(self.memoized.reversed(), None)

    @classmethod
    def deserialize(cls, data: Dict[int, Any], namespace: Dict[str, Any], memo: Dict[Any, Any]) -> Dict[int, Any]:  ##

        return _deserialize(data, namespace, memo)


try:
    import regex
    _has_regex = True
except ImportError:
    _has_regex = False

if sys.version_info >= (3, 11):
    import re._parser as sre_parse
    import re._constants as sre_constants
else:
    import sre_parse
    import sre_constants

categ_pattern = re.compile(r'\\p{[A-Za-z_]+}')

def get_regexp_width(expr: str) -> Union[Tuple[int, int], List[int]]:
    if _has_regex:
        ##

        ##

        ##

        regexp_final = re.sub(categ_pattern, 'A', expr)
    else:
        if re.search(categ_pattern, expr):
            raise ImportError('`regex` module must be installed in order to use Unicode categories.', expr)
        regexp_final = expr
    try:
        ##

        return [int(x) for x in sre_parse.parse(regexp_final).getwidth()]
    except sre_constants.error:
        if not _has_regex:
            raise ValueError(expr)
        else:
            ##

            ##

            c = regex.compile(regexp_final)
            ##

            ##

            MAXWIDTH = getattr(sre_parse, "MAXWIDTH", sre_constants.MAXREPEAT)
            if c.match('') is None:
                ##

                return 1, int(MAXWIDTH)
            else:
                return 0, int(MAXWIDTH)



class Meta:

    empty: bool
    line: int
    column: int
    start_pos: int
    end_line: int
    end_column: int
    end_pos: int
    orig_expansion: 'List[TerminalDef]'
    match_tree: bool

    def __init__(self):
        self.empty = True


_Leaf_T = TypeVar("_Leaf_T")
Branch = Union[_Leaf_T, 'Tree[_Leaf_T]']


class Tree(Generic[_Leaf_T]):
    #--

    data: str
    children: 'List[Branch[_Leaf_T]]'

    def __init__(self, data: str, children: 'List[Branch[_Leaf_T]]', meta: Optional[Meta]=None) -> None:
        self.data = data
        self.children = children
        self._meta = meta

    @property
    def meta(self) -> Meta:
        if self._meta is None:
            self._meta = Meta()
        return self._meta

    def __repr__(self):
        return 'Tree(%r, %r)' % (self.data, self.children)

    def _pretty_label(self):
        return self.data

    def _pretty(self, level, indent_str):
        yield f'{indent_str*level}{self._pretty_label()}'
        if len(self.children) == 1 and not isinstance(self.children[0], Tree):
            yield f'\t{self.children[0]}\n'
        else:
            yield '\n'
            for n in self.children:
                if isinstance(n, Tree):
                    yield from n._pretty(level+1, indent_str)
                else:
                    yield f'{indent_str*(level+1)}{n}\n'

    def pretty(self, indent_str: str='  ') -> str:
        #--
        return ''.join(self._pretty(0, indent_str))

    def __rich__(self, parent:Optional['rich.tree.Tree']=None) -> 'rich.tree.Tree':
        #--
        return self._rich(parent)

    def _rich(self, parent):
        if parent:
            tree = parent.add(f'[bold]{self.data}[/bold]')
        else:
            import rich.tree
            tree = rich.tree.Tree(self.data)

        for c in self.children:
            if isinstance(c, Tree):
                c._rich(tree)
            else:
                tree.add(f'[green]{c}[/green]')

        return tree

    def __eq__(self, other):
        try:
            return self.data == other.data and self.children == other.children
        except AttributeError:
            return False

    def __ne__(self, other):
        return not (self == other)

    def __hash__(self) -> int:
        return hash((self.data, tuple(self.children)))

    def iter_subtrees(self) -> 'Iterator[Tree[_Leaf_T]]':
        #--
        queue = [self]
        subtrees = dict()
        for subtree in queue:
            subtrees[id(subtree)] = subtree
            queue += [c for c in reversed(subtree.children)
                      if isinstance(c, Tree) and id(c) not in subtrees]

        del queue
        return reversed(list(subtrees.values()))

    def iter_subtrees_topdown(self):
        #--
        stack = [self]
        stack_append = stack.append
        stack_pop = stack.pop
        while stack:
            node = stack_pop()
            if not isinstance(node, Tree):
                continue
            yield node
            for child in reversed(node.children):
                stack_append(child)

    def find_pred(self, pred: 'Callable[[Tree[_Leaf_T]], bool]') -> 'Iterator[Tree[_Leaf_T]]':
        #--
        return filter(pred, self.iter_subtrees())

    def find_data(self, data: str) -> 'Iterator[Tree[_Leaf_T]]':
        #--
        return self.find_pred(lambda t: t.data == data)


from functools import wraps, update_wrapper
from inspect import getmembers, getmro

_Return_T = TypeVar('_Return_T')
_Return_V = TypeVar('_Return_V')
_Leaf_T = TypeVar('_Leaf_T')
_Leaf_U = TypeVar('_Leaf_U')
_R = TypeVar('_R')
_FUNC = Callable[..., _Return_T]
_DECORATED = Union[_FUNC, type]

class _DiscardType:
    #--

    def __repr__(self):
        return "lark.visitors.Discard"

Discard = _DiscardType()

##


class _Decoratable:
    #--

    @classmethod
    def _apply_v_args(cls, visit_wrapper):
        mro = getmro(cls)
        assert mro[0] is cls
        libmembers = {name for _cls in mro[1:] for name, _ in getmembers(_cls)}
        for name, value in getmembers(cls):

            ##

            if name.startswith('_') or (name in libmembers and name not in cls.__dict__):
                continue
            if not callable(value):
                continue

            ##

            if isinstance(cls.__dict__[name], _VArgsWrapper):
                continue

            setattr(cls, name, _VArgsWrapper(cls.__dict__[name], visit_wrapper))
        return cls

    def __class_getitem__(cls, _):
        return cls


class Transformer(_Decoratable, ABC, Generic[_Leaf_T, _Return_T]):
    #--
    __visit_tokens__ = True   ##


    def __init__(self,  visit_tokens: bool=True) -> None:
        self.__visit_tokens__ = visit_tokens

    def _call_userfunc(self, tree, new_children=None):
        ##

        children = new_children if new_children is not None else tree.children
        try:
            f = getattr(self, tree.data)
        except AttributeError:
            return self.__default__(tree.data, children, tree.meta)
        else:
            try:
                wrapper = getattr(f, 'visit_wrapper', None)
                if wrapper is not None:
                    return f.visit_wrapper(f, tree.data, children, tree.meta)
                else:
                    return f(children)
            except GrammarError:
                raise
            except Exception as e:
                raise VisitError(tree.data, tree, e)

    def _call_userfunc_token(self, token):
        try:
            f = getattr(self, token.type)
        except AttributeError:
            return self.__default_token__(token)
        else:
            try:
                return f(token)
            except GrammarError:
                raise
            except Exception as e:
                raise VisitError(token.type, token, e)

    def _transform_children(self, children):
        for c in children:
            if isinstance(c, Tree):
                res = self._transform_tree(c)
            elif self.__visit_tokens__ and isinstance(c, Token):
                res = self._call_userfunc_token(c)
            else:
                res = c

            if res is not Discard:
                yield res

    def _transform_tree(self, tree):
        children = list(self._transform_children(tree.children))
        return self._call_userfunc(tree, children)

    def transform(self, tree: Tree[_Leaf_T]) -> _Return_T:
        #--
        res = list(self._transform_children([tree]))
        if not res:
            return None     ##

        assert len(res) == 1
        return res[0]

    def __mul__(
            self: 'Transformer[_Leaf_T, Tree[_Leaf_U]]',
            other: 'Union[Transformer[_Leaf_U, _Return_V], TransformerChain[_Leaf_U, _Return_V,]]'
    ) -> 'TransformerChain[_Leaf_T, _Return_V]':
        #--
        return TransformerChain(self, other)

    def __default__(self, data, children, meta):
        #--
        return Tree(data, children, meta)

    def __default_token__(self, token):
        #--
        return token


def merge_transformers(base_transformer=None, **transformers_to_merge):
    #--
    if base_transformer is None:
        base_transformer = Transformer()
    for prefix, transformer in transformers_to_merge.items():
        for method_name in dir(transformer):
            method = getattr(transformer, method_name)
            if not callable(method):
                continue
            if method_name.startswith("_") or method_name == "transform":
                continue
            prefixed_method = prefix + "__" + method_name
            if hasattr(base_transformer, prefixed_method):
                raise AttributeError("Cannot merge: method '%s' appears more than once" % prefixed_method)

            setattr(base_transformer, prefixed_method, method)

    return base_transformer


class InlineTransformer(Transformer):   ##

    def _call_userfunc(self, tree, new_children=None):
        ##

        children = new_children if new_children is not None else tree.children
        try:
            f = getattr(self, tree.data)
        except AttributeError:
            return self.__default__(tree.data, children, tree.meta)
        else:
            return f(*children)


class TransformerChain(Generic[_Leaf_T, _Return_T]):

    transformers: 'Tuple[Union[Transformer, TransformerChain], ...]'

    def __init__(self, *transformers: 'Union[Transformer, TransformerChain]') -> None:
        self.transformers = transformers

    def transform(self, tree: Tree[_Leaf_T]) -> _Return_T:
        for t in self.transformers:
            tree = t.transform(tree)
        return cast(_Return_T, tree)

    def __mul__(
            self: 'TransformerChain[_Leaf_T, Tree[_Leaf_U]]',
            other: 'Union[Transformer[_Leaf_U, _Return_V], TransformerChain[_Leaf_U, _Return_V]]'
    ) -> 'TransformerChain[_Leaf_T, _Return_V]':
        return TransformerChain(*self.transformers + (other,))


class Transformer_InPlace(Transformer[_Leaf_T, _Return_T]):
    #--
    def _transform_tree(self, tree):           ##

        return self._call_userfunc(tree)

    def transform(self, tree: Tree[_Leaf_T]) -> _Return_T:
        for subtree in tree.iter_subtrees():
            subtree.children = list(self._transform_children(subtree.children))

        return self._transform_tree(tree)


class Transformer_NonRecursive(Transformer[_Leaf_T, _Return_T]):
    #--

    def transform(self, tree: Tree[_Leaf_T]) -> _Return_T:
        ##

        rev_postfix = []
        q: List[Branch[_Leaf_T]] = [tree]
        while q:
            t = q.pop()
            rev_postfix.append(t)
            if isinstance(t, Tree):
                q += t.children

        ##

        stack: List = []
        for x in reversed(rev_postfix):
            if isinstance(x, Tree):
                size = len(x.children)
                if size:
                    args = stack[-size:]
                    del stack[-size:]
                else:
                    args = []

                res = self._call_userfunc(x, args)
                if res is not Discard:
                    stack.append(res)

            elif self.__visit_tokens__ and isinstance(x, Token):
                res = self._call_userfunc_token(x)
                if res is not Discard:
                    stack.append(res)
            else:
                stack.append(x)

        result, = stack  ##

        ##

        ##

        ##

        return cast(_Return_T, result)


class Transformer_InPlaceRecursive(Transformer):
    #--
    def _transform_tree(self, tree):
        tree.children = list(self._transform_children(tree.children))
        return self._call_userfunc(tree)


##


class VisitorBase:
    def _call_userfunc(self, tree):
        return getattr(self, tree.data, self.__default__)(tree)

    def __default__(self, tree):
        #--
        return tree

    def __class_getitem__(cls, _):
        return cls


class Visitor(VisitorBase, ABC, Generic[_Leaf_T]):
    #--

    def visit(self, tree: Tree[_Leaf_T]) -> Tree[_Leaf_T]:
        #--
        for subtree in tree.iter_subtrees():
            self._call_userfunc(subtree)
        return tree

    def visit_topdown(self, tree: Tree[_Leaf_T]) -> Tree[_Leaf_T]:
        #--
        for subtree in tree.iter_subtrees_topdown():
            self._call_userfunc(subtree)
        return tree


class Visitor_Recursive(VisitorBase, Generic[_Leaf_T]):
    #--

    def visit(self, tree: Tree[_Leaf_T]) -> Tree[_Leaf_T]:
        #--
        for child in tree.children:
            if isinstance(child, Tree):
                self.visit(child)

        self._call_userfunc(tree)
        return tree

    def visit_topdown(self,tree: Tree[_Leaf_T]) -> Tree[_Leaf_T]:
        #--
        self._call_userfunc(tree)

        for child in tree.children:
            if isinstance(child, Tree):
                self.visit_topdown(child)

        return tree


class Interpreter(_Decoratable, ABC, Generic[_Leaf_T, _Return_T]):
    #--

    def visit(self, tree: Tree[_Leaf_T]) -> _Return_T:
        ##

        ##

        ##

        return self._visit_tree(tree)

    def _visit_tree(self, tree: Tree[_Leaf_T]):
        f = getattr(self, tree.data)
        wrapper = getattr(f, 'visit_wrapper', None)
        if wrapper is not None:
            return f.visit_wrapper(f, tree.data, tree.children, tree.meta)
        else:
            return f(tree)

    def visit_children(self, tree: Tree[_Leaf_T]) -> List:
        return [self._visit_tree(child) if isinstance(child, Tree) else child
                for child in tree.children]

    def __getattr__(self, name):
        return self.__default__

    def __default__(self, tree):
        return self.visit_children(tree)


_InterMethod = Callable[[Type[Interpreter], _Return_T], _R]

def visit_children_decor(func: _InterMethod) -> _InterMethod:
    #--
    @wraps(func)
    def inner(cls, tree):
        values = cls.visit_children(tree)
        return func(cls, values)
    return inner

##


def _apply_v_args(obj, visit_wrapper):
    try:
        _apply = obj._apply_v_args
    except AttributeError:
        return _VArgsWrapper(obj, visit_wrapper)
    else:
        return _apply(visit_wrapper)


class _VArgsWrapper:
    #--
    base_func: Callable

    def __init__(self, func: Callable, visit_wrapper: Callable[[Callable, str, list, Any], Any]):
        if isinstance(func, _VArgsWrapper):
            func = func.base_func
        self.base_func = func
        self.visit_wrapper = visit_wrapper
        update_wrapper(self, func)

    def __call__(self, *args, **kwargs):
        return self.base_func(*args, **kwargs)

    def __get__(self, instance, owner=None):
        try:
            ##

            ##

            g = type(self.base_func).__get__
        except AttributeError:
            return self
        else:
            return _VArgsWrapper(g(self.base_func, instance, owner), self.visit_wrapper)

    def __set_name__(self, owner, name):
        try:
            f = type(self.base_func).__set_name__
        except AttributeError:
            return
        else:
            f(self.base_func, owner, name)


def _vargs_inline(f, _data, children, _meta):
    return f(*children)
def _vargs_meta_inline(f, _data, children, meta):
    return f(meta, *children)
def _vargs_meta(f, _data, children, meta):
    return f(meta, children)
def _vargs_tree(f, data, children, meta):
    return f(Tree(data, children, meta))


def v_args(inline: bool = False, meta: bool = False, tree: bool = False, wrapper: Optional[Callable] = None) -> Callable[[_DECORATED], _DECORATED]:
    #--
    if tree and (meta or inline):
        raise ValueError("Visitor functions cannot combine 'tree' with 'meta' or 'inline'.")

    func = None
    if meta:
        if inline:
            func = _vargs_meta_inline
        else:
            func = _vargs_meta
    elif inline:
        func = _vargs_inline
    elif tree:
        func = _vargs_tree

    if wrapper is not None:
        if func is not None:
            raise ValueError("Cannot use 'wrapper' along with 'tree', 'meta' or 'inline'.")
        func = wrapper

    def _visitor_args_dec(obj):
        return _apply_v_args(obj, func)
    return _visitor_args_dec



TOKEN_DEFAULT_PRIORITY = 0


class Symbol(Serialize):
    __slots__ = ('name',)

    name: str
    is_term: ClassVar[bool] = NotImplemented

    def __init__(self, name: str) -> None:
        self.name = name

    def __eq__(self, other):
        assert isinstance(other, Symbol), other
        return self.is_term == other.is_term and self.name == other.name

    def __ne__(self, other):
        return not (self == other)

    def __hash__(self):
        return hash(self.name)

    def __repr__(self):
        return '%s(%r)' % (type(self).__name__, self.name)

    fullrepr = property(__repr__)

    def renamed(self, f):
        return type(self)(f(self.name))


class Terminal(Symbol):
    __serialize_fields__ = 'name', 'filter_out'

    is_term: ClassVar[bool] = True

    def __init__(self, name, filter_out=False):
        self.name = name
        self.filter_out = filter_out

    @property
    def fullrepr(self):
        return '%s(%r, %r)' % (type(self).__name__, self.name, self.filter_out)

    def renamed(self, f):
        return type(self)(f(self.name), self.filter_out)


class NonTerminal(Symbol):
    __serialize_fields__ = 'name',

    is_term: ClassVar[bool] = False


class RuleOptions(Serialize):
    __serialize_fields__ = 'keep_all_tokens', 'expand1', 'priority', 'template_source', 'empty_indices'

    keep_all_tokens: bool
    expand1: bool
    priority: Optional[int]
    template_source: Optional[str]
    empty_indices: Tuple[bool, ...]

    def __init__(self, keep_all_tokens: bool=False, expand1: bool=False, priority: Optional[int]=None, template_source: Optional[str]=None, empty_indices: Tuple[bool, ...]=()) -> None:
        self.keep_all_tokens = keep_all_tokens
        self.expand1 = expand1
        self.priority = priority
        self.template_source = template_source
        self.empty_indices = empty_indices

    def __repr__(self):
        return 'RuleOptions(%r, %r, %r, %r)' % (
            self.keep_all_tokens,
            self.expand1,
            self.priority,
            self.template_source
        )


class Rule(Serialize):
    #--
    __slots__ = ('origin', 'expansion', 'alias', 'options', 'order', '_hash')

    __serialize_fields__ = 'origin', 'expansion', 'order', 'alias', 'options'
    __serialize_namespace__ = Terminal, NonTerminal, RuleOptions

    origin: NonTerminal
    expansion: Sequence[Symbol]
    order: int
    alias: Optional[str]
    options: RuleOptions
    _hash: int

    def __init__(self, origin: NonTerminal, expansion: Sequence[Symbol],
                 order: int=0, alias: Optional[str]=None, options: Optional[RuleOptions]=None):
        self.origin = origin
        self.expansion = expansion
        self.alias = alias
        self.order = order
        self.options = options or RuleOptions()
        self._hash = hash((self.origin, tuple(self.expansion)))

    def _deserialize(self):
        self._hash = hash((self.origin, tuple(self.expansion)))

    def __str__(self):
        return '<%s : %s>' % (self.origin.name, ' '.join(x.name for x in self.expansion))

    def __repr__(self):
        return 'Rule(%r, %r, %r, %r)' % (self.origin, self.expansion, self.alias, self.options)

    def __hash__(self):
        return self._hash

    def __eq__(self, other):
        if not isinstance(other, Rule):
            return False
        return self.origin == other.origin and self.expansion == other.expansion



from copy import copy

try:  ##

    has_interegular = bool(interegular)
except NameError:
    has_interegular = False

class Pattern(Serialize, ABC):
    #--

    value: str
    flags: Collection[str]
    raw: Optional[str]
    type: ClassVar[str]

    def __init__(self, value: str, flags: Collection[str] = (), raw: Optional[str] = None) -> None:
        self.value = value
        self.flags = frozenset(flags)
        self.raw = raw

    def __repr__(self):
        return repr(self.to_regexp())

    ##

    def __hash__(self):
        return hash((type(self), self.value, self.flags))

    def __eq__(self, other):
        return type(self) == type(other) and self.value == other.value and self.flags == other.flags

    @abstractmethod
    def to_regexp(self) -> str:
        raise NotImplementedError()

    @property
    @abstractmethod
    def min_width(self) -> int:
        raise NotImplementedError()

    @property
    @abstractmethod
    def max_width(self) -> int:
        raise NotImplementedError()

    def _get_flags(self, value):
        for f in self.flags:
            value = ('(?%s:%s)' % (f, value))
        return value


class PatternStr(Pattern):
    __serialize_fields__ = 'value', 'flags', 'raw'

    type: ClassVar[str] = "str"

    def to_regexp(self) -> str:
        return self._get_flags(re.escape(self.value))

    @property
    def min_width(self) -> int:
        return len(self.value)

    @property
    def max_width(self) -> int:
        return len(self.value)


class PatternRE(Pattern):
    __serialize_fields__ = 'value', 'flags', 'raw', '_width'

    type: ClassVar[str] = "re"

    def to_regexp(self) -> str:
        return self._get_flags(self.value)

    _width = None
    def _get_width(self):
        if self._width is None:
            self._width = get_regexp_width(self.to_regexp())
        return self._width

    @property
    def min_width(self) -> int:
        return self._get_width()[0]

    @property
    def max_width(self) -> int:
        return self._get_width()[1]


class TerminalDef(Serialize):
    #--
    __serialize_fields__ = 'name', 'pattern', 'priority'
    __serialize_namespace__ = PatternStr, PatternRE

    name: str
    pattern: Pattern
    priority: int

    def __init__(self, name: str, pattern: Pattern, priority: int = TOKEN_DEFAULT_PRIORITY) -> None:
        assert isinstance(pattern, Pattern), pattern
        self.name = name
        self.pattern = pattern
        self.priority = priority

    def __repr__(self):
        return '%s(%r, %r)' % (type(self).__name__, self.name, self.pattern)

    def user_repr(self) -> str:
        if self.name.startswith('__'):  ##

            return self.pattern.raw or self.name
        else:
            return self.name

_T = TypeVar('_T', bound="Token")

class Token(str):
    #--
    __slots__ = ('type', 'start_pos', 'value', 'line', 'column', 'end_line', 'end_column', 'end_pos')

    __match_args__ = ('type', 'value')

    type: str
    start_pos: Optional[int]
    value: Any
    line: Optional[int]
    column: Optional[int]
    end_line: Optional[int]
    end_column: Optional[int]
    end_pos: Optional[int]


    @overload
    def __new__(
            cls,
            type: str,
            value: Any,
            start_pos: Optional[int] = None,
            line: Optional[int] = None,
            column: Optional[int] = None,
            end_line: Optional[int] = None,
            end_column: Optional[int] = None,
            end_pos: Optional[int] = None
    ) -> 'Token':
        ...

    @overload
    def __new__(
            cls,
            type_: str,
            value: Any,
            start_pos: Optional[int] = None,
            line: Optional[int] = None,
            column: Optional[int] = None,
            end_line: Optional[int] = None,
            end_column: Optional[int] = None,
            end_pos: Optional[int] = None
    ) -> 'Token':        ...

    def __new__(cls, *args, **kwargs):
        if "type_" in kwargs:
            warnings.warn("`type_` is deprecated use `type` instead", DeprecationWarning)

            if "type" in kwargs:
                raise TypeError("Error: using both 'type' and the deprecated 'type_' as arguments.")
            kwargs["type"] = kwargs.pop("type_")

        return cls._future_new(*args, **kwargs)


    @classmethod
    def _future_new(cls, type, value, start_pos=None, line=None, column=None, end_line=None, end_column=None, end_pos=None):
        inst = super(Token, cls).__new__(cls, value)

        inst.type = type
        inst.start_pos = start_pos
        inst.value = value
        inst.line = line
        inst.column = column
        inst.end_line = end_line
        inst.end_column = end_column
        inst.end_pos = end_pos
        return inst

    @overload
    def update(self, type: Optional[str] = None, value: Optional[Any] = None) -> 'Token':
        ...

    @overload
    def update(self, type_: Optional[str] = None, value: Optional[Any] = None) -> 'Token':
        ...

    def update(self, *args, **kwargs):
        if "type_" in kwargs:
            warnings.warn("`type_` is deprecated use `type` instead", DeprecationWarning)

            if "type" in kwargs:
                raise TypeError("Error: using both 'type' and the deprecated 'type_' as arguments.")
            kwargs["type"] = kwargs.pop("type_")

        return self._future_update(*args, **kwargs)

    def _future_update(self, type: Optional[str] = None, value: Optional[Any] = None) -> 'Token':
        return Token.new_borrow_pos(
            type if type is not None else self.type,
            value if value is not None else self.value,
            self
        )

    @classmethod
    def new_borrow_pos(cls: Type[_T], type_: str, value: Any, borrow_t: 'Token') -> _T:
        return cls(type_, value, borrow_t.start_pos, borrow_t.line, borrow_t.column, borrow_t.end_line, borrow_t.end_column, borrow_t.end_pos)

    def __reduce__(self):
        return (self.__class__, (self.type, self.value, self.start_pos, self.line, self.column))

    def __repr__(self):
        return 'Token(%r, %r)' % (self.type, self.value)

    def __deepcopy__(self, memo):
        return Token(self.type, self.value, self.start_pos, self.line, self.column)

    def __eq__(self, other):
        if isinstance(other, Token) and self.type != other.type:
            return False

        return str.__eq__(self, other)

    __hash__ = str.__hash__


class LineCounter:
    #--

    __slots__ = 'char_pos', 'line', 'column', 'line_start_pos', 'newline_char'

    def __init__(self, newline_char):
        self.newline_char = newline_char
        self.char_pos = 0
        self.line = 1
        self.column = 1
        self.line_start_pos = 0

    def __eq__(self, other):
        if not isinstance(other, LineCounter):
            return NotImplemented

        return self.char_pos == other.char_pos and self.newline_char == other.newline_char

    def feed(self, token: Token, test_newline=True):
        #--
        if test_newline:
            newlines = token.count(self.newline_char)
            if newlines:
                self.line += newlines
                self.line_start_pos = self.char_pos + token.rindex(self.newline_char) + 1

        self.char_pos += len(token)
        self.column = self.char_pos - self.line_start_pos + 1


class UnlessCallback:
    def __init__(self, scanner):
        self.scanner = scanner

    def __call__(self, t):
        res = self.scanner.match(t.value, 0)
        if res:
            _value, t.type = res
        return t


class CallChain:
    def __init__(self, callback1, callback2, cond):
        self.callback1 = callback1
        self.callback2 = callback2
        self.cond = cond

    def __call__(self, t):
        t2 = self.callback1(t)
        return self.callback2(t) if self.cond(t2) else t2


def _get_match(re_, regexp, s, flags):
    m = re_.match(regexp, s, flags)
    if m:
        return m.group(0)

def _create_unless(terminals, g_regex_flags, re_, use_bytes):
    tokens_by_type = classify(terminals, lambda t: type(t.pattern))
    assert len(tokens_by_type) <= 2, tokens_by_type.keys()
    embedded_strs = set()
    callback = {}
    for retok in tokens_by_type.get(PatternRE, []):
        unless = []
        for strtok in tokens_by_type.get(PatternStr, []):
            if strtok.priority != retok.priority:
                continue
            s = strtok.pattern.value
            if s == _get_match(re_, retok.pattern.to_regexp(), s, g_regex_flags):
                unless.append(strtok)
                if strtok.pattern.flags <= retok.pattern.flags:
                    embedded_strs.add(strtok)
        if unless:
            callback[retok.name] = UnlessCallback(Scanner(unless, g_regex_flags, re_, match_whole=True, use_bytes=use_bytes))

    new_terminals = [t for t in terminals if t not in embedded_strs]
    return new_terminals, callback


class Scanner:
    def __init__(self, terminals, g_regex_flags, re_, use_bytes, match_whole=False):
        self.terminals = terminals
        self.g_regex_flags = g_regex_flags
        self.re_ = re_
        self.use_bytes = use_bytes
        self.match_whole = match_whole

        self.allowed_types = {t.name for t in self.terminals}

        self._mres = self._build_mres(terminals, len(terminals))

    def _build_mres(self, terminals, max_size):
        ##

        ##

        ##

        postfix = '$' if self.match_whole else ''
        mres = []
        while terminals:
            pattern = u'|'.join(u'(?P<%s>%s)' % (t.name, t.pattern.to_regexp() + postfix) for t in terminals[:max_size])
            if self.use_bytes:
                pattern = pattern.encode('latin-1')
            try:
                mre = self.re_.compile(pattern, self.g_regex_flags)
            except AssertionError:  ##

                return self._build_mres(terminals, max_size // 2)

            mres.append(mre)
            terminals = terminals[max_size:]
        return mres

    def match(self, text, pos):
        for mre in self._mres:
            m = mre.match(text, pos)
            if m:
                return m.group(0), m.lastgroup


def _regexp_has_newline(r: str):
    #--
    return '\n' in r or '\\n' in r or '\\s' in r or '[^' in r or ('(?s' in r and '.' in r)


class LexerState:
    #--

    __slots__ = 'text', 'line_ctr', 'last_token'

    text: str
    line_ctr: LineCounter
    last_token: Optional[Token]

    def __init__(self, text: str, line_ctr: Optional[LineCounter]=None, last_token: Optional[Token]=None):
        self.text = text
        self.line_ctr = line_ctr or LineCounter(b'\n' if isinstance(text, bytes) else '\n')
        self.last_token = last_token

    def __eq__(self, other):
        if not isinstance(other, LexerState):
            return NotImplemented

        return self.text is other.text and self.line_ctr == other.line_ctr and self.last_token == other.last_token

    def __copy__(self):
        return type(self)(self.text, copy(self.line_ctr), self.last_token)


class LexerThread:
    #--

    def __init__(self, lexer: 'Lexer', lexer_state: LexerState):
        self.lexer = lexer
        self.state = lexer_state

    @classmethod
    def from_text(cls, lexer: 'Lexer', text: str) -> 'LexerThread':
        return cls(lexer, LexerState(text))

    def lex(self, parser_state):
        return self.lexer.lex(self.state, parser_state)

    def __copy__(self):
        return type(self)(self.lexer, copy(self.state))

    _Token = Token


_Callback = Callable[[Token], Token]

class Lexer(ABC):
    #--
    @abstractmethod
    def lex(self, lexer_state: LexerState, parser_state: Any) -> Iterator[Token]:
        return NotImplemented

    def make_lexer_state(self, text):
        #--
        return LexerState(text)


def _check_regex_collisions(terminal_to_regexp: Dict[TerminalDef, str], comparator, strict_mode, max_collisions_to_show=8):
    if not comparator:
        comparator = interegular.Comparator.from_regexes(terminal_to_regexp)

    ##

    ##

    max_time = 2 if strict_mode else 0.2

    ##

    if comparator.count_marked_pairs() >= max_collisions_to_show:
        return
    for group in classify(terminal_to_regexp, lambda t: t.priority).values():
        for a, b in comparator.check(group, skip_marked=True):
            assert a.priority == b.priority
            ##

            comparator.mark(a, b)

            ##

            message = f"Collision between Terminals {a.name} and {b.name}. "
            try:
                example = comparator.get_example_overlap(a, b, max_time).format_multiline()
            except ValueError:
                ##

                example = "No example could be found fast enough. However, the collision does still exists"
            if strict_mode:
                raise LexError(f"{message}\n{example}")
            logger.warning("%s The lexer will choose between them arbitrarily.\n%s", message, example)
            if comparator.count_marked_pairs() >= max_collisions_to_show:
                logger.warning("Found 8 regex collisions, will not check for more.")
                return


class AbstractBasicLexer(Lexer):
    terminals_by_name: Dict[str, TerminalDef]

    @abstractmethod
    def __init__(self, conf: 'LexerConf', comparator=None) -> None:
        ...

    @abstractmethod
    def next_token(self, lex_state: LexerState, parser_state: Any = None) -> Token:
        ...

    def lex(self, state: LexerState, parser_state: Any) -> Iterator[Token]:
        with suppress(EOFError):
            while True:
                yield self.next_token(state, parser_state)


class BasicLexer(AbstractBasicLexer):
    terminals: Collection[TerminalDef]
    ignore_types: FrozenSet[str]
    newline_types: FrozenSet[str]
    user_callbacks: Dict[str, _Callback]
    callback: Dict[str, _Callback]
    re: ModuleType

    def __init__(self, conf: 'LexerConf', comparator=None) -> None:
        terminals = list(conf.terminals)
        assert all(isinstance(t, TerminalDef) for t in terminals), terminals

        self.re = conf.re_module

        if not conf.skip_validation:
            ##

            terminal_to_regexp = {}
            for t in terminals:
                regexp = t.pattern.to_regexp()
                try:
                    self.re.compile(regexp, conf.g_regex_flags)
                except self.re.error:
                    raise LexError("Cannot compile token %s: %s" % (t.name, t.pattern))

                if t.pattern.min_width == 0:
                    raise LexError("Lexer does not allow zero-width terminals. (%s: %s)" % (t.name, t.pattern))
                if t.pattern.type == "re":
                    terminal_to_regexp[t] = regexp

            if not (set(conf.ignore) <= {t.name for t in terminals}):
                raise LexError("Ignore terminals are not defined: %s" % (set(conf.ignore) - {t.name for t in terminals}))

            if has_interegular:
                _check_regex_collisions(terminal_to_regexp, comparator, conf.strict)
            elif conf.strict:
                raise LexError("interegular must be installed for strict mode. Use `pip install 'lark[interegular]'`.")

        ##

        self.newline_types = frozenset(t.name for t in terminals if _regexp_has_newline(t.pattern.to_regexp()))
        self.ignore_types = frozenset(conf.ignore)

        terminals.sort(key=lambda x: (-x.priority, -x.pattern.max_width, -len(x.pattern.value), x.name))
        self.terminals = terminals
        self.user_callbacks = conf.callbacks
        self.g_regex_flags = conf.g_regex_flags
        self.use_bytes = conf.use_bytes
        self.terminals_by_name = conf.terminals_by_name

        self._scanner = None

    def _build_scanner(self):
        terminals, self.callback = _create_unless(self.terminals, self.g_regex_flags, self.re, self.use_bytes)
        assert all(self.callback.values())

        for type_, f in self.user_callbacks.items():
            if type_ in self.callback:
                ##

                self.callback[type_] = CallChain(self.callback[type_], f, lambda t: t.type == type_)
            else:
                self.callback[type_] = f

        self._scanner = Scanner(terminals, self.g_regex_flags, self.re, self.use_bytes)

    @property
    def scanner(self):
        if self._scanner is None:
            self._build_scanner()
        return self._scanner

    def match(self, text, pos):
        return self.scanner.match(text, pos)

    def next_token(self, lex_state: LexerState, parser_state: Any = None) -> Token:
        line_ctr = lex_state.line_ctr
        while line_ctr.char_pos < len(lex_state.text):
            res = self.match(lex_state.text, line_ctr.char_pos)
            if not res:
                allowed = self.scanner.allowed_types - self.ignore_types
                if not allowed:
                    allowed = {"<END-OF-FILE>"}
                raise UnexpectedCharacters(lex_state.text, line_ctr.char_pos, line_ctr.line, line_ctr.column,
                                           allowed=allowed, token_history=lex_state.last_token and [lex_state.last_token],
                                           state=parser_state, terminals_by_name=self.terminals_by_name)

            value, type_ = res

            ignored = type_ in self.ignore_types
            t = None
            if not ignored or type_ in self.callback:
                t = Token(type_, value, line_ctr.char_pos, line_ctr.line, line_ctr.column)
            line_ctr.feed(value, type_ in self.newline_types)
            if t is not None:
                t.end_line = line_ctr.line
                t.end_column = line_ctr.column
                t.end_pos = line_ctr.char_pos
                if t.type in self.callback:
                    t = self.callback[t.type](t)
                if not ignored:
                    if not isinstance(t, Token):
                        raise LexError("Callbacks must return a token (returned %r)" % t)
                    lex_state.last_token = t
                    return t

        ##

        raise EOFError(self)


class ContextualLexer(Lexer):
    lexers: Dict[int, AbstractBasicLexer]
    root_lexer: AbstractBasicLexer

    BasicLexer: Type[AbstractBasicLexer] = BasicLexer

    def __init__(self, conf: 'LexerConf', states: Dict[int, Collection[str]], always_accept: Collection[str]=()) -> None:
        terminals = list(conf.terminals)
        terminals_by_name = conf.terminals_by_name

        trad_conf = copy(conf)
        trad_conf.terminals = terminals

        if has_interegular and not conf.skip_validation:
            comparator = interegular.Comparator.from_regexes({t: t.pattern.to_regexp() for t in terminals})
        else:
            comparator = None
        lexer_by_tokens: Dict[FrozenSet[str], AbstractBasicLexer] = {}
        self.lexers = {}
        for state, accepts in states.items():
            key = frozenset(accepts)
            try:
                lexer = lexer_by_tokens[key]
            except KeyError:
                accepts = set(accepts) | set(conf.ignore) | set(always_accept)
                lexer_conf = copy(trad_conf)
                lexer_conf.terminals = [terminals_by_name[n] for n in accepts if n in terminals_by_name]
                lexer = self.BasicLexer(lexer_conf, comparator)
                lexer_by_tokens[key] = lexer

            self.lexers[state] = lexer

        assert trad_conf.terminals is terminals
        trad_conf.skip_validation = True  ##

        self.root_lexer = self.BasicLexer(trad_conf, comparator)

    def lex(self, lexer_state: LexerState, parser_state: 'ParserState') -> Iterator[Token]:
        try:
            while True:
                lexer = self.lexers[parser_state.position]
                yield lexer.next_token(lexer_state, parser_state)
        except EOFError:
            pass
        except UnexpectedCharacters as e:
            ##

            ##

            try:
                last_token = lexer_state.last_token  ##

                token = self.root_lexer.next_token(lexer_state, parser_state)
                raise UnexpectedToken(token, e.allowed, state=parser_state, token_history=[last_token], terminals_by_name=self.root_lexer.terminals_by_name)
            except UnexpectedCharacters:
                raise e  ##




_ParserArgType: 'TypeAlias' = 'Literal["earley", "lalr", "cyk", "auto"]'
_LexerArgType: 'TypeAlias' = 'Union[Literal["auto", "basic", "contextual", "dynamic", "dynamic_complete"], Type[Lexer]]'
_LexerCallback = Callable[[Token], Token]
ParserCallbacks = Dict[str, Callable]

class LexerConf(Serialize):
    __serialize_fields__ = 'terminals', 'ignore', 'g_regex_flags', 'use_bytes', 'lexer_type'
    __serialize_namespace__ = TerminalDef,

    terminals: Collection[TerminalDef]
    re_module: ModuleType
    ignore: Collection[str]
    postlex: 'Optional[PostLex]'
    callbacks: Dict[str, _LexerCallback]
    g_regex_flags: int
    skip_validation: bool
    use_bytes: bool
    lexer_type: Optional[_LexerArgType]
    strict: bool

    def __init__(self, terminals: Collection[TerminalDef], re_module: ModuleType, ignore: Collection[str]=(), postlex: 'Optional[PostLex]'=None,
                 callbacks: Optional[Dict[str, _LexerCallback]]=None, g_regex_flags: int=0, skip_validation: bool=False, use_bytes: bool=False, strict: bool=False):
        self.terminals = terminals
        self.terminals_by_name = {t.name: t for t in self.terminals}
        assert len(self.terminals) == len(self.terminals_by_name)
        self.ignore = ignore
        self.postlex = postlex
        self.callbacks = callbacks or {}
        self.g_regex_flags = g_regex_flags
        self.re_module = re_module
        self.skip_validation = skip_validation
        self.use_bytes = use_bytes
        self.strict = strict
        self.lexer_type = None

    def _deserialize(self):
        self.terminals_by_name = {t.name: t for t in self.terminals}

    def __deepcopy__(self, memo=None):
        return type(self)(
            deepcopy(self.terminals, memo),
            self.re_module,
            deepcopy(self.ignore, memo),
            deepcopy(self.postlex, memo),
            deepcopy(self.callbacks, memo),
            deepcopy(self.g_regex_flags, memo),
            deepcopy(self.skip_validation, memo),
            deepcopy(self.use_bytes, memo),
        )

class ParserConf(Serialize):
    __serialize_fields__ = 'rules', 'start', 'parser_type'

    rules: List['Rule']
    callbacks: ParserCallbacks
    start: List[str]
    parser_type: _ParserArgType

    def __init__(self, rules: List['Rule'], callbacks: ParserCallbacks, start: List[str]):
        assert isinstance(start, list)
        self.rules = rules
        self.callbacks = callbacks
        self.start = start


from functools import partial, wraps
from itertools import product


class ExpandSingleChild:
    def __init__(self, node_builder):
        self.node_builder = node_builder

    def __call__(self, children):
        if len(children) == 1:
            return children[0]
        else:
            return self.node_builder(children)



class PropagatePositions:
    def __init__(self, node_builder, node_filter=None):
        self.node_builder = node_builder
        self.node_filter = node_filter

    def __call__(self, children):
        res = self.node_builder(children)

        if isinstance(res, Tree):
            ##

            ##

            ##

            ##


            res_meta = res.meta

            first_meta = self._pp_get_meta(children)
            if first_meta is not None:
                if not hasattr(res_meta, 'line'):
                    ##

                    res_meta.line = getattr(first_meta, 'container_line', first_meta.line)
                    res_meta.column = getattr(first_meta, 'container_column', first_meta.column)
                    res_meta.start_pos = getattr(first_meta, 'container_start_pos', first_meta.start_pos)
                    res_meta.empty = False

                res_meta.container_line = getattr(first_meta, 'container_line', first_meta.line)
                res_meta.container_column = getattr(first_meta, 'container_column', first_meta.column)
                res_meta.container_start_pos = getattr(first_meta, 'container_start_pos', first_meta.start_pos)

            last_meta = self._pp_get_meta(reversed(children))
            if last_meta is not None:
                if not hasattr(res_meta, 'end_line'):
                    res_meta.end_line = getattr(last_meta, 'container_end_line', last_meta.end_line)
                    res_meta.end_column = getattr(last_meta, 'container_end_column', last_meta.end_column)
                    res_meta.end_pos = getattr(last_meta, 'container_end_pos', last_meta.end_pos)
                    res_meta.empty = False

                res_meta.container_end_line = getattr(last_meta, 'container_end_line', last_meta.end_line)
                res_meta.container_end_column = getattr(last_meta, 'container_end_column', last_meta.end_column)
                res_meta.container_end_pos = getattr(last_meta, 'container_end_pos', last_meta.end_pos)

        return res

    def _pp_get_meta(self, children):
        for c in children:
            if self.node_filter is not None and not self.node_filter(c):
                continue
            if isinstance(c, Tree):
                if not c.meta.empty:
                    return c.meta
            elif isinstance(c, Token):
                return c
            elif hasattr(c, '__lark_meta__'):
                return c.__lark_meta__()

def make_propagate_positions(option):
    if callable(option):
        return partial(PropagatePositions, node_filter=option)
    elif option is True:
        return PropagatePositions
    elif option is False:
        return None

    raise ConfigurationError('Invalid option for propagate_positions: %r' % option)


class ChildFilter:
    def __init__(self, to_include, append_none, node_builder):
        self.node_builder = node_builder
        self.to_include = to_include
        self.append_none = append_none

    def __call__(self, children):
        filtered = []

        for i, to_expand, add_none in self.to_include:
            if add_none:
                filtered += [None] * add_none
            if to_expand:
                filtered += children[i].children
            else:
                filtered.append(children[i])

        if self.append_none:
            filtered += [None] * self.append_none

        return self.node_builder(filtered)


class ChildFilterLALR(ChildFilter):
    #--

    def __call__(self, children):
        filtered = []
        for i, to_expand, add_none in self.to_include:
            if add_none:
                filtered += [None] * add_none
            if to_expand:
                if filtered:
                    filtered += children[i].children
                else:   ##

                    filtered = children[i].children
            else:
                filtered.append(children[i])

        if self.append_none:
            filtered += [None] * self.append_none

        return self.node_builder(filtered)


class ChildFilterLALR_NoPlaceholders(ChildFilter):
    #--
    def __init__(self, to_include, node_builder):
        self.node_builder = node_builder
        self.to_include = to_include

    def __call__(self, children):
        filtered = []
        for i, to_expand in self.to_include:
            if to_expand:
                if filtered:
                    filtered += children[i].children
                else:   ##

                    filtered = children[i].children
            else:
                filtered.append(children[i])
        return self.node_builder(filtered)


def _should_expand(sym):
    return not sym.is_term and sym.name.startswith('_')


def maybe_create_child_filter(expansion, keep_all_tokens, ambiguous, _empty_indices: List[bool]):
    ##

    if _empty_indices:
        assert _empty_indices.count(False) == len(expansion)
        s = ''.join(str(int(b)) for b in _empty_indices)
        empty_indices = [len(ones) for ones in s.split('0')]
        assert len(empty_indices) == len(expansion)+1, (empty_indices, len(expansion))
    else:
        empty_indices = [0] * (len(expansion)+1)

    to_include = []
    nones_to_add = 0
    for i, sym in enumerate(expansion):
        nones_to_add += empty_indices[i]
        if keep_all_tokens or not (sym.is_term and sym.filter_out):
            to_include.append((i, _should_expand(sym), nones_to_add))
            nones_to_add = 0

    nones_to_add += empty_indices[len(expansion)]

    if _empty_indices or len(to_include) < len(expansion) or any(to_expand for i, to_expand,_ in to_include):
        if _empty_indices or ambiguous:
            return partial(ChildFilter if ambiguous else ChildFilterLALR, to_include, nones_to_add)
        else:
            ##

            return partial(ChildFilterLALR_NoPlaceholders, [(i, x) for i,x,_ in to_include])


class AmbiguousExpander:
    #--
    def __init__(self, to_expand, tree_class, node_builder):
        self.node_builder = node_builder
        self.tree_class = tree_class
        self.to_expand = to_expand

    def __call__(self, children):
        def _is_ambig_tree(t):
            return hasattr(t, 'data') and t.data == '_ambig'

        ##

        ##

        ##

        ##

        ambiguous = []
        for i, child in enumerate(children):
            if _is_ambig_tree(child):
                if i in self.to_expand:
                    ambiguous.append(i)

                child.expand_kids_by_data('_ambig')

        if not ambiguous:
            return self.node_builder(children)

        expand = [child.children if i in ambiguous else (child,) for i, child in enumerate(children)]
        return self.tree_class('_ambig', [self.node_builder(list(f)) for f in product(*expand)])


def maybe_create_ambiguous_expander(tree_class, expansion, keep_all_tokens):
    to_expand = [i for i, sym in enumerate(expansion)
                 if keep_all_tokens or ((not (sym.is_term and sym.filter_out)) and _should_expand(sym))]
    if to_expand:
        return partial(AmbiguousExpander, to_expand, tree_class)


class AmbiguousIntermediateExpander:
    #--

    def __init__(self, tree_class, node_builder):
        self.node_builder = node_builder
        self.tree_class = tree_class

    def __call__(self, children):
        def _is_iambig_tree(child):
            return hasattr(child, 'data') and child.data == '_iambig'

        def _collapse_iambig(children):
            #--

            ##

            ##

            if children and _is_iambig_tree(children[0]):
                iambig_node = children[0]
                result = []
                for grandchild in iambig_node.children:
                    collapsed = _collapse_iambig(grandchild.children)
                    if collapsed:
                        for child in collapsed:
                            child.children += children[1:]
                        result += collapsed
                    else:
                        new_tree = self.tree_class('_inter', grandchild.children + children[1:])
                        result.append(new_tree)
                return result

        collapsed = _collapse_iambig(children)
        if collapsed:
            processed_nodes = [self.node_builder(c.children) for c in collapsed]
            return self.tree_class('_ambig', processed_nodes)

        return self.node_builder(children)



def inplace_transformer(func):
    @wraps(func)
    def f(children):
        ##

        tree = Tree(func.__name__, children)
        return func(tree)
    return f


def apply_visit_wrapper(func, name, wrapper):
    if wrapper is _vargs_meta or wrapper is _vargs_meta_inline:
        raise NotImplementedError("Meta args not supported for internal transformer")

    @wraps(func)
    def f(children):
        return wrapper(func, name, children, None)
    return f


class ParseTreeBuilder:
    def __init__(self, rules, tree_class, propagate_positions=False, ambiguous=False, maybe_placeholders=False):
        self.tree_class = tree_class
        self.propagate_positions = propagate_positions
        self.ambiguous = ambiguous
        self.maybe_placeholders = maybe_placeholders

        self.rule_builders = list(self._init_builders(rules))

    def _init_builders(self, rules):
        propagate_positions = make_propagate_positions(self.propagate_positions)

        for rule in rules:
            options = rule.options
            keep_all_tokens = options.keep_all_tokens
            expand_single_child = options.expand1

            wrapper_chain = list(filter(None, [
                (expand_single_child and not rule.alias) and ExpandSingleChild,
                maybe_create_child_filter(rule.expansion, keep_all_tokens, self.ambiguous, options.empty_indices if self.maybe_placeholders else None),
                propagate_positions,
                self.ambiguous and maybe_create_ambiguous_expander(self.tree_class, rule.expansion, keep_all_tokens),
                self.ambiguous and partial(AmbiguousIntermediateExpander, self.tree_class)
            ]))

            yield rule, wrapper_chain

    def create_callback(self, transformer=None):
        callbacks = {}

        default_handler = getattr(transformer, '__default__', None)
        if default_handler:
            def default_callback(data, children):
                return default_handler(data, children, None)
        else:
            default_callback = self.tree_class

        for rule, wrapper_chain in self.rule_builders:

            user_callback_name = rule.alias or rule.options.template_source or rule.origin.name
            try:
                f = getattr(transformer, user_callback_name)
                wrapper = getattr(f, 'visit_wrapper', None)
                if wrapper is not None:
                    f = apply_visit_wrapper(f, user_callback_name, wrapper)
                elif isinstance(transformer, Transformer_InPlace):
                    f = inplace_transformer(f)
            except AttributeError:
                f = partial(default_callback, user_callback_name)

            for w in wrapper_chain:
                f = w(f)

            if rule in callbacks:
                raise GrammarError("Rule '%s' already exists" % (rule,))

            callbacks[rule] = f

        return callbacks



class Action:
    def __init__(self, name):
        self.name = name
    def __str__(self):
        return self.name
    def __repr__(self):
        return str(self)

Shift = Action('Shift')
Reduce = Action('Reduce')

StateT = TypeVar("StateT")

class ParseTableBase(Generic[StateT]):
    states: Dict[StateT, Dict[str, Tuple]]
    start_states: Dict[str, StateT]
    end_states: Dict[str, StateT]

    def __init__(self, states, start_states, end_states):
        self.states = states
        self.start_states = start_states
        self.end_states = end_states

    def serialize(self, memo):
        tokens = Enumerator()

        states = {
            state: {tokens.get(token): ((1, arg.serialize(memo)) if action is Reduce else (0, arg))
                    for token, (action, arg) in actions.items()}
            for state, actions in self.states.items()
        }

        return {
            'tokens': tokens.reversed(),
            'states': states,
            'start_states': self.start_states,
            'end_states': self.end_states,
        }

    @classmethod
    def deserialize(cls, data, memo):
        tokens = data['tokens']
        states = {
            state: {tokens[token]: ((Reduce, Rule.deserialize(arg, memo)) if action==1 else (Shift, arg))
                    for token, (action, arg) in actions.items()}
            for state, actions in data['states'].items()
        }
        return cls(states, data['start_states'], data['end_states'])

class ParseTable(ParseTableBase['State']):
    #--
    pass


class IntParseTable(ParseTableBase[int]):
    #--

    @classmethod
    def from_ParseTable(cls, parse_table: ParseTable):
        enum = list(parse_table.states)
        state_to_idx: Dict['State', int] = {s:i for i,s in enumerate(enum)}
        int_states = {}

        for s, la in parse_table.states.items():
            la = {k:(v[0], state_to_idx[v[1]]) if v[0] is Shift else v
                  for k,v in la.items()}
            int_states[ state_to_idx[s] ] = la


        start_states = {start:state_to_idx[s] for start, s in parse_table.start_states.items()}
        end_states = {start:state_to_idx[s] for start, s in parse_table.end_states.items()}
        return cls(int_states, start_states, end_states)



class ParseConf(Generic[StateT]):
    __slots__ = 'parse_table', 'callbacks', 'start', 'start_state', 'end_state', 'states'

    parse_table: ParseTableBase[StateT]
    callbacks: ParserCallbacks
    start: str

    start_state: StateT
    end_state: StateT
    states: Dict[StateT, Dict[str, tuple]]

    def __init__(self, parse_table: ParseTableBase[StateT], callbacks: ParserCallbacks, start: str):
        self.parse_table = parse_table

        self.start_state = self.parse_table.start_states[start]
        self.end_state = self.parse_table.end_states[start]
        self.states = self.parse_table.states

        self.callbacks = callbacks
        self.start = start

class ParserState(Generic[StateT]):
    __slots__ = 'parse_conf', 'lexer', 'state_stack', 'value_stack'

    parse_conf: ParseConf[StateT]
    lexer: LexerThread
    state_stack: List[StateT]
    value_stack: list

    def __init__(self, parse_conf: ParseConf[StateT], lexer: LexerThread, state_stack=None, value_stack=None):
        self.parse_conf = parse_conf
        self.lexer = lexer
        self.state_stack = state_stack or [self.parse_conf.start_state]
        self.value_stack = value_stack or []

    @property
    def position(self) -> StateT:
        return self.state_stack[-1]

    ##

    def __eq__(self, other) -> bool:
        if not isinstance(other, ParserState):
            return NotImplemented
        return len(self.state_stack) == len(other.state_stack) and self.position == other.position

    def __copy__(self):
        return self.copy()

    def copy(self, deepcopy_values=True) -> 'ParserState[StateT]':
        return type(self)(
            self.parse_conf,
            self.lexer, ##

            copy(self.state_stack),
            deepcopy(self.value_stack) if deepcopy_values else copy(self.value_stack),
        )

    def feed_token(self, token: Token, is_end=False) -> Any:
        state_stack = self.state_stack
        value_stack = self.value_stack
        states = self.parse_conf.states
        end_state = self.parse_conf.end_state
        callbacks = self.parse_conf.callbacks

        while True:
            state = state_stack[-1]
            try:
                action, arg = states[state][token.type]
            except KeyError:
                expected = {s for s in states[state].keys() if s.isupper()}
                raise UnexpectedToken(token, expected, state=self, interactive_parser=None)

            assert arg != end_state

            if action is Shift:
                ##

                assert not is_end
                state_stack.append(arg)
                value_stack.append(token if token.type not in callbacks else callbacks[token.type](token))
                return
            else:
                ##

                rule = arg
                size = len(rule.expansion)
                if size:
                    s = value_stack[-size:]
                    del state_stack[-size:]
                    del value_stack[-size:]
                else:
                    s = []

                value = callbacks[rule](s) if callbacks else s

                _action, new_state = states[state_stack[-1]][rule.origin.name]
                assert _action is Shift
                state_stack.append(new_state)
                value_stack.append(value)

                if is_end and state_stack[-1] == end_state:
                    return value_stack[-1]


class LALR_Parser(Serialize):
    def __init__(self, parser_conf: ParserConf, debug: bool=False, strict: bool=False):
        analysis = LALR_Analyzer(parser_conf, debug=debug, strict=strict)
        analysis.compute_lalr()
        callbacks = parser_conf.callbacks

        self._parse_table = analysis.parse_table
        self.parser_conf = parser_conf
        self.parser = _Parser(analysis.parse_table, callbacks, debug)

    @classmethod
    def deserialize(cls, data, memo, callbacks, debug=False):
        inst = cls.__new__(cls)
        inst._parse_table = IntParseTable.deserialize(data, memo)
        inst.parser = _Parser(inst._parse_table, callbacks, debug)
        return inst

    def serialize(self, memo: Any = None) -> Dict[str, Any]:
        return self._parse_table.serialize(memo)

    def parse_interactive(self, lexer: LexerThread, start: str):
        return self.parser.parse(lexer, start, start_interactive=True)

    def parse(self, lexer, start, on_error=None):
        try:
            return self.parser.parse(lexer, start)
        except UnexpectedInput as e:
            if on_error is None:
                raise

            while True:
                if isinstance(e, UnexpectedCharacters):
                    s = e.interactive_parser.lexer_thread.state
                    p = s.line_ctr.char_pos

                if not on_error(e):
                    raise e

                if isinstance(e, UnexpectedCharacters):
                    ##

                    if p == s.line_ctr.char_pos:
                        s.line_ctr.feed(s.text[p:p+1])

                try:
                    return e.interactive_parser.resume_parse()
                except UnexpectedToken as e2:
                    if (isinstance(e, UnexpectedToken)
                        and e.token.type == e2.token.type == '$END'
                        and e.interactive_parser == e2.interactive_parser):
                        ##

                        raise e2
                    e = e2
                except UnexpectedCharacters as e2:
                    e = e2


class _Parser:
    parse_table: ParseTableBase
    callbacks: ParserCallbacks
    debug: bool

    def __init__(self, parse_table: ParseTableBase, callbacks: ParserCallbacks, debug: bool=False):
        self.parse_table = parse_table
        self.callbacks = callbacks
        self.debug = debug

    def parse(self, lexer: LexerThread, start: str, value_stack=None, state_stack=None, start_interactive=False):
        parse_conf = ParseConf(self.parse_table, self.callbacks, start)
        parser_state = ParserState(parse_conf, lexer, state_stack, value_stack)
        if start_interactive:
            return InteractiveParser(self, parser_state, parser_state.lexer)
        return self.parse_from_state(parser_state)


    def parse_from_state(self, state: ParserState, last_token: Optional[Token]=None):
        #--
        try:
            token = last_token
            for token in state.lexer.lex(state):
                assert token is not None
                state.feed_token(token)

            end_token = Token.new_borrow_pos('$END', '', token) if token else Token('$END', '', 0, 1, 1)
            return state.feed_token(end_token, True)
        except UnexpectedInput as e:
            try:
                e.interactive_parser = InteractiveParser(self, state, state.lexer)
            except NameError:
                pass
            raise e
        except Exception as e:
            if self.debug:
                print("")
                print("STATE STACK DUMP")
                print("----------------")
                for i, s in enumerate(state.state_stack):
                    print('%d)' % i , s)
                print("")

            raise


class InteractiveParser:
    #--
    def __init__(self, parser, parser_state: ParserState, lexer_thread: LexerThread):
        self.parser = parser
        self.parser_state = parser_state
        self.lexer_thread = lexer_thread
        self.result = None

    @property
    def lexer_state(self) -> LexerThread:
        warnings.warn("lexer_state will be removed in subsequent releases. Use lexer_thread instead.", DeprecationWarning)
        return self.lexer_thread

    def feed_token(self, token: Token):
        #--
        return self.parser_state.feed_token(token, token.type == '$END')

    def iter_parse(self) -> Iterator[Token]:
        #--
        for token in self.lexer_thread.lex(self.parser_state):
            yield token
            self.result = self.feed_token(token)

    def exhaust_lexer(self) -> List[Token]:
        #--
        return list(self.iter_parse())


    def feed_eof(self, last_token=None):
        #--
        eof = Token.new_borrow_pos('$END', '', last_token) if last_token is not None else self.lexer_thread._Token('$END', '', 0, 1, 1)
        return self.feed_token(eof)


    def __copy__(self):
        #--
        return self.copy()

    def copy(self, deepcopy_values=True):
        return type(self)(
            self.parser,
            self.parser_state.copy(deepcopy_values=deepcopy_values),
            copy(self.lexer_thread),
        )

    def __eq__(self, other):
        if not isinstance(other, InteractiveParser):
            return False

        return self.parser_state == other.parser_state and self.lexer_thread == other.lexer_thread

    def as_immutable(self):
        #--
        p = copy(self)
        return ImmutableInteractiveParser(p.parser, p.parser_state, p.lexer_thread)

    def pretty(self):
        #--
        out = ["Parser choices:"]
        for k, v in self.choices().items():
            out.append('\t- %s -> %r' % (k, v))
        out.append('stack size: %s' % len(self.parser_state.state_stack))
        return '\n'.join(out)

    def choices(self):
        #--
        return self.parser_state.parse_conf.parse_table.states[self.parser_state.position]

    def accepts(self):
        #--
        accepts = set()
        conf_no_callbacks = copy(self.parser_state.parse_conf)
        ##

        ##

        conf_no_callbacks.callbacks = {}
        for t in self.choices():
            if t.isupper(): ##

                new_cursor = self.copy(deepcopy_values=False)
                new_cursor.parser_state.parse_conf = conf_no_callbacks
                try:
                    new_cursor.feed_token(self.lexer_thread._Token(t, ''))
                except UnexpectedToken:
                    pass
                else:
                    accepts.add(t)
        return accepts

    def resume_parse(self):
        #--
        return self.parser.parse_from_state(self.parser_state, last_token=self.lexer_thread.state.last_token)



class ImmutableInteractiveParser(InteractiveParser):
    #--

    result = None

    def __hash__(self):
        return hash((self.parser_state, self.lexer_thread))

    def feed_token(self, token):
        c = copy(self)
        c.result = InteractiveParser.feed_token(c, token)
        return c

    def exhaust_lexer(self):
        #--
        cursor = self.as_mutable()
        cursor.exhaust_lexer()
        return cursor.as_immutable()

    def as_mutable(self):
        #--
        p = copy(self)
        return InteractiveParser(p.parser, p.parser_state, p.lexer_thread)



def _wrap_lexer(lexer_class):
    future_interface = getattr(lexer_class, '__future_interface__', False)
    if future_interface:
        return lexer_class
    else:
        class CustomLexerWrapper(Lexer):
            def __init__(self, lexer_conf):
                self.lexer = lexer_class(lexer_conf)
            def lex(self, lexer_state, parser_state):
                return self.lexer.lex(lexer_state.text)
        return CustomLexerWrapper


def _deserialize_parsing_frontend(data, memo, lexer_conf, callbacks, options):
    parser_conf = ParserConf.deserialize(data['parser_conf'], memo)
    cls = (options and options._plugins.get('LALR_Parser')) or LALR_Parser
    parser = cls.deserialize(data['parser'], memo, callbacks, options.debug)
    parser_conf.callbacks = callbacks
    return ParsingFrontend(lexer_conf, parser_conf, options, parser=parser)


_parser_creators: 'Dict[str, Callable[[LexerConf, Any, Any], Any]]' = {}


class ParsingFrontend(Serialize):
    __serialize_fields__ = 'lexer_conf', 'parser_conf', 'parser'

    lexer_conf: LexerConf
    parser_conf: ParserConf
    options: Any

    def __init__(self, lexer_conf: LexerConf, parser_conf: ParserConf, options, parser=None):
        self.parser_conf = parser_conf
        self.lexer_conf = lexer_conf
        self.options = options

        ##

        if parser:  ##

            self.parser = parser
        else:
            create_parser = _parser_creators.get(parser_conf.parser_type)
            assert create_parser is not None, "{} is not supported in standalone mode".format(
                    parser_conf.parser_type
                )
            self.parser = create_parser(lexer_conf, parser_conf, options)

        ##

        lexer_type = lexer_conf.lexer_type
        self.skip_lexer = False
        if lexer_type in ('dynamic', 'dynamic_complete'):
            assert lexer_conf.postlex is None
            self.skip_lexer = True
            return

        if isinstance(lexer_type, type):
            assert issubclass(lexer_type, Lexer)
            self.lexer = _wrap_lexer(lexer_type)(lexer_conf)
        elif isinstance(lexer_type, str):
            create_lexer = {
                'basic': create_basic_lexer,
                'contextual': create_contextual_lexer,
            }[lexer_type]
            self.lexer = create_lexer(lexer_conf, self.parser, lexer_conf.postlex, options)
        else:
            raise TypeError("Bad value for lexer_type: {lexer_type}")

        if lexer_conf.postlex:
            self.lexer = PostLexConnector(self.lexer, lexer_conf.postlex)

    def _verify_start(self, start=None):
        if start is None:
            start_decls = self.parser_conf.start
            if len(start_decls) > 1:
                raise ConfigurationError("Lark initialized with more than 1 possible start rule. Must specify which start rule to parse", start_decls)
            start ,= start_decls
        elif start not in self.parser_conf.start:
            raise ConfigurationError("Unknown start rule %s. Must be one of %r" % (start, self.parser_conf.start))
        return start

    def _make_lexer_thread(self, text: str) -> Union[str, LexerThread]:
        cls = (self.options and self.options._plugins.get('LexerThread')) or LexerThread
        return text if self.skip_lexer else cls.from_text(self.lexer, text)

    def parse(self, text: str, start=None, on_error=None):
        chosen_start = self._verify_start(start)
        kw = {} if on_error is None else {'on_error': on_error}
        stream = self._make_lexer_thread(text)
        return self.parser.parse(stream, chosen_start, **kw)

    def parse_interactive(self, text: Optional[str]=None, start=None):
        ##

        ##

        chosen_start = self._verify_start(start)
        if self.parser_conf.parser_type != 'lalr':
            raise ConfigurationError("parse_interactive() currently only works with parser='lalr' ")
        stream = self._make_lexer_thread(text)  ##

        return self.parser.parse_interactive(stream, chosen_start)


def _validate_frontend_args(parser, lexer) -> None:
    assert_config(parser, ('lalr', 'earley', 'cyk'))
    if not isinstance(lexer, type):     ##

        expected = {
            'lalr': ('basic', 'contextual'),
            'earley': ('basic', 'dynamic', 'dynamic_complete'),
            'cyk': ('basic', ),
         }[parser]
        assert_config(lexer, expected, 'Parser %r does not support lexer %%r, expected one of %%s' % parser)


def _get_lexer_callbacks(transformer, terminals):
    result = {}
    for terminal in terminals:
        callback = getattr(transformer, terminal.name, None)
        if callback is not None:
            result[terminal.name] = callback
    return result

class PostLexConnector:
    def __init__(self, lexer, postlexer):
        self.lexer = lexer
        self.postlexer = postlexer

    def lex(self, lexer_state, parser_state):
        i = self.lexer.lex(lexer_state, parser_state)
        return self.postlexer.process(i)



def create_basic_lexer(lexer_conf, parser, postlex, options) -> BasicLexer:
    cls = (options and options._plugins.get('BasicLexer')) or BasicLexer
    return cls(lexer_conf)

def create_contextual_lexer(lexer_conf: LexerConf, parser, postlex, options) -> ContextualLexer:
    cls = (options and options._plugins.get('ContextualLexer')) or ContextualLexer
    parse_table: ParseTableBase[int] = parser._parse_table
    states: Dict[int, Collection[str]] = {idx:list(t.keys()) for idx, t in parse_table.states.items()}
    always_accept: Collection[str] = postlex.always_accept if postlex else ()
    return cls(lexer_conf, states, always_accept=always_accept)

def create_lalr_parser(lexer_conf: LexerConf, parser_conf: ParserConf, options=None) -> LALR_Parser:
    debug = options.debug if options else False
    strict = options.strict if options else False
    cls = (options and options._plugins.get('LALR_Parser')) or LALR_Parser
    return cls(parser_conf, debug=debug, strict=strict)

_parser_creators['lalr'] = create_lalr_parser




class PostLex(ABC):
    @abstractmethod
    def process(self, stream: Iterator[Token]) -> Iterator[Token]:
        return stream

    always_accept: Iterable[str] = ()

class LarkOptions(Serialize):
    #--

    start: List[str]
    debug: bool
    strict: bool
    transformer: 'Optional[Transformer]'
    propagate_positions: Union[bool, str]
    maybe_placeholders: bool
    cache: Union[bool, str]
    regex: bool
    g_regex_flags: int
    keep_all_tokens: bool
    tree_class: Optional[Callable[[str, List], Any]]
    parser: _ParserArgType
    lexer: _LexerArgType
    ambiguity: 'Literal["auto", "resolve", "explicit", "forest"]'
    postlex: Optional[PostLex]
    priority: 'Optional[Literal["auto", "normal", "invert"]]'
    lexer_callbacks: Dict[str, Callable[[Token], Token]]
    use_bytes: bool
    ordered_sets: bool
    edit_terminals: Optional[Callable[[TerminalDef], TerminalDef]]
    import_paths: 'List[Union[str, Callable[[Union[None, str, PackageResource], str], Tuple[str, str]]]]'
    source_path: Optional[str]

    OPTIONS_DOC = r"""
    **===  General Options  ===**

    start
            The start symbol. Either a string, or a list of strings for multiple possible starts (Default: "start")
    debug
            Display debug information and extra warnings. Use only when debugging (Default: ``False``)
            When used with Earley, it generates a forest graph as "sppf.png", if 'dot' is installed.
    strict
            Throw an exception on any potential ambiguity, including shift/reduce conflicts, and regex collisions.
    transformer
            Applies the transformer to every parse tree (equivalent to applying it after the parse, but faster)
    propagate_positions
            Propagates positional attributes into the 'meta' attribute of all tree branches.
            Sets attributes: (line, column, end_line, end_column, start_pos, end_pos,
                              container_line, container_column, container_end_line, container_end_column)
            Accepts ``False``, ``True``, or a callable, which will filter which nodes to ignore when propagating.
    maybe_placeholders
            When ``True``, the ``[]`` operator returns ``None`` when not matched.
            When ``False``,  ``[]`` behaves like the ``?`` operator, and returns no value at all.
            (default= ``True``)
    cache
            Cache the results of the Lark grammar analysis, for x2 to x3 faster loading. LALR only for now.

            - When ``False``, does nothing (default)
            - When ``True``, caches to a temporary file in the local directory
            - When given a string, caches to the path pointed by the string
    regex
            When True, uses the ``regex`` module instead of the stdlib ``re``.
    g_regex_flags
            Flags that are applied to all terminals (both regex and strings)
    keep_all_tokens
            Prevent the tree builder from automagically removing "punctuation" tokens (Default: ``False``)
    tree_class
            Lark will produce trees comprised of instances of this class instead of the default ``lark.Tree``.

    **=== Algorithm Options ===**

    parser
            Decides which parser engine to use. Accepts "earley" or "lalr". (Default: "earley").
            (there is also a "cyk" option for legacy)
    lexer
            Decides whether or not to use a lexer stage

            - "auto" (default): Choose for me based on the parser
            - "basic": Use a basic lexer
            - "contextual": Stronger lexer (only works with parser="lalr")
            - "dynamic": Flexible and powerful (only with parser="earley")
            - "dynamic_complete": Same as dynamic, but tries *every* variation of tokenizing possible.
    ambiguity
            Decides how to handle ambiguity in the parse. Only relevant if parser="earley"

            - "resolve": The parser will automatically choose the simplest derivation
              (it chooses consistently: greedy for tokens, non-greedy for rules)
            - "explicit": The parser will return all derivations wrapped in "_ambig" tree nodes (i.e. a forest).
            - "forest": The parser will return the root of the shared packed parse forest.

    **=== Misc. / Domain Specific Options ===**

    postlex
            Lexer post-processing (Default: ``None``) Only works with the basic and contextual lexers.
    priority
            How priorities should be evaluated - "auto", ``None``, "normal", "invert" (Default: "auto")
    lexer_callbacks
            Dictionary of callbacks for the lexer. May alter tokens during lexing. Use with caution.
    use_bytes
            Accept an input of type ``bytes`` instead of ``str``.
    ordered_sets
            Should Earley use ordered-sets to achieve stable output (~10% slower than regular sets. Default: True)
    edit_terminals
            A callback for editing the terminals before parse.
    import_paths
            A List of either paths or loader functions to specify from where grammars are imported
    source_path
            Override the source of from where the grammar was loaded. Useful for relative imports and unconventional grammar loading
    **=== End of Options ===**
    """
    if __doc__:
        __doc__ += OPTIONS_DOC


    ##

    ##

    ##

    ##

    ##

    ##

    _defaults: Dict[str, Any] = {
        'debug': False,
        'strict': False,
        'keep_all_tokens': False,
        'tree_class': None,
        'cache': False,
        'postlex': None,
        'parser': 'earley',
        'lexer': 'auto',
        'transformer': None,
        'start': 'start',
        'priority': 'auto',
        'ambiguity': 'auto',
        'regex': False,
        'propagate_positions': False,
        'lexer_callbacks': {},
        'maybe_placeholders': True,
        'edit_terminals': None,
        'g_regex_flags': 0,
        'use_bytes': False,
        'ordered_sets': True,
        'import_paths': [],
        'source_path': None,
        '_plugins': {},
    }

    def __init__(self, options_dict: Dict[str, Any]) -> None:
        o = dict(options_dict)

        options = {}
        for name, default in self._defaults.items():
            if name in o:
                value = o.pop(name)
                if isinstance(default, bool) and name not in ('cache', 'use_bytes', 'propagate_positions'):
                    value = bool(value)
            else:
                value = default

            options[name] = value

        if isinstance(options['start'], str):
            options['start'] = [options['start']]

        self.__dict__['options'] = options


        assert_config(self.parser, ('earley', 'lalr', 'cyk', None))

        if self.parser == 'earley' and self.transformer:
            raise ConfigurationError('Cannot specify an embedded transformer when using the Earley algorithm. '
                             'Please use your transformer on the resulting parse tree, or use a different algorithm (i.e. LALR)')

        if o:
            raise ConfigurationError("Unknown options: %s" % o.keys())

    def __getattr__(self, name: str) -> Any:
        try:
            return self.__dict__['options'][name]
        except KeyError as e:
            raise AttributeError(e)

    def __setattr__(self, name: str, value: str) -> None:
        assert_config(name, self.options.keys(), "%r isn't a valid option. Expected one of: %s")
        self.options[name] = value

    def serialize(self, memo = None) -> Dict[str, Any]:
        return self.options

    @classmethod
    def deserialize(cls, data: Dict[str, Any], memo: Dict[int, Union[TerminalDef, Rule]]) -> "LarkOptions":
        return cls(data)


##

##

_LOAD_ALLOWED_OPTIONS = {'postlex', 'transformer', 'lexer_callbacks', 'use_bytes', 'debug', 'g_regex_flags', 'regex', 'propagate_positions', 'tree_class', '_plugins'}

_VALID_PRIORITY_OPTIONS = ('auto', 'normal', 'invert', None)
_VALID_AMBIGUITY_OPTIONS = ('auto', 'resolve', 'explicit', 'forest')


_T = TypeVar('_T', bound="Lark")

class Lark(Serialize):
    #--

    source_path: str
    source_grammar: str
    grammar: 'Grammar'
    options: LarkOptions
    lexer: Lexer
    parser: 'ParsingFrontend'
    terminals: Collection[TerminalDef]

    def __init__(self, grammar: 'Union[Grammar, str, IO[str]]', **options) -> None:
        self.options = LarkOptions(options)
        re_module: types.ModuleType

        ##

        use_regex = self.options.regex
        if use_regex:
            if _has_regex:
                re_module = regex
            else:
                raise ImportError('`regex` module must be installed if calling `Lark(regex=True)`.')
        else:
            re_module = re

        ##

        if self.options.source_path is None:
            try:
                self.source_path = grammar.name  ##

            except AttributeError:
                self.source_path = '<string>'
        else:
            self.source_path = self.options.source_path

        ##

        try:
            read = grammar.read  ##

        except AttributeError:
            pass
        else:
            grammar = read()

        cache_fn = None
        cache_sha256 = None
        if isinstance(grammar, str):
            self.source_grammar = grammar
            if self.options.use_bytes:
                if not grammar.isascii():
                    raise ConfigurationError("Grammar must be ascii only, when use_bytes=True")

            if self.options.cache:
                if self.options.parser != 'lalr':
                    raise ConfigurationError("cache only works with parser='lalr' for now")

                unhashable = ('transformer', 'postlex', 'lexer_callbacks', 'edit_terminals', '_plugins')
                options_str = ''.join(k+str(v) for k, v in options.items() if k not in unhashable)
                from . import __version__
                s = grammar + options_str + __version__ + str(sys.version_info[:2])
                cache_sha256 = sha256_digest(s)

                if isinstance(self.options.cache, str):
                    cache_fn = self.options.cache
                else:
                    if self.options.cache is not True:
                        raise ConfigurationError("cache argument must be bool or str")

                    try:
                        username = getpass.getuser()
                    except Exception:
                        ##

                        ##

                        ##

                        username = "unknown"

                    cache_fn = tempfile.gettempdir() + "/.lark_cache_%s_%s_%s_%s.tmp" % (username, cache_sha256, *sys.version_info[:2])

                old_options = self.options
                try:
                    with FS.open(cache_fn, 'rb') as f:
                        logger.debug('Loading grammar from cache: %s', cache_fn)
                        ##

                        for name in (set(options) - _LOAD_ALLOWED_OPTIONS):
                            del options[name]
                        file_sha256 = f.readline().rstrip(b'\n')
                        cached_used_files = pickle.load(f)
                        if file_sha256 == cache_sha256.encode('utf8') and verify_used_files(cached_used_files):
                            cached_parser_data = pickle.load(f)
                            self._load(cached_parser_data, **options)
                            return
                except FileNotFoundError:
                    ##

                    pass
                except Exception: ##

                    logger.exception("Failed to load Lark from cache: %r. We will try to carry on.", cache_fn)

                    ##

                    ##

                    self.options = old_options


            ##

            self.grammar, used_files = load_grammar(grammar, self.source_path, self.options.import_paths, self.options.keep_all_tokens)
        else:
            assert isinstance(grammar, Grammar)
            self.grammar = grammar


        if self.options.lexer == 'auto':
            if self.options.parser == 'lalr':
                self.options.lexer = 'contextual'
            elif self.options.parser == 'earley':
                if self.options.postlex is not None:
                    logger.info("postlex can't be used with the dynamic lexer, so we use 'basic' instead. "
                                "Consider using lalr with contextual instead of earley")
                    self.options.lexer = 'basic'
                else:
                    self.options.lexer = 'dynamic'
            elif self.options.parser == 'cyk':
                self.options.lexer = 'basic'
            else:
                assert False, self.options.parser
        lexer = self.options.lexer
        if isinstance(lexer, type):
            assert issubclass(lexer, Lexer)     ##

        else:
            assert_config(lexer, ('basic', 'contextual', 'dynamic', 'dynamic_complete'))
            if self.options.postlex is not None and 'dynamic' in lexer:
                raise ConfigurationError("Can't use postlex with a dynamic lexer. Use basic or contextual instead")

        if self.options.ambiguity == 'auto':
            if self.options.parser == 'earley':
                self.options.ambiguity = 'resolve'
        else:
            assert_config(self.options.parser, ('earley', 'cyk'), "%r doesn't support disambiguation. Use one of these parsers instead: %s")

        if self.options.priority == 'auto':
            self.options.priority = 'normal'

        if self.options.priority not in _VALID_PRIORITY_OPTIONS:
            raise ConfigurationError("invalid priority option: %r. Must be one of %r" % (self.options.priority, _VALID_PRIORITY_OPTIONS))
        if self.options.ambiguity not in _VALID_AMBIGUITY_OPTIONS:
            raise ConfigurationError("invalid ambiguity option: %r. Must be one of %r" % (self.options.ambiguity, _VALID_AMBIGUITY_OPTIONS))

        if self.options.parser is None:
            terminals_to_keep = '*'
        elif self.options.postlex is not None:
            terminals_to_keep = set(self.options.postlex.always_accept)
        else:
            terminals_to_keep = set()

        ##

        self.terminals, self.rules, self.ignore_tokens = self.grammar.compile(self.options.start, terminals_to_keep)

        if self.options.edit_terminals:
            for t in self.terminals:
                self.options.edit_terminals(t)

        self._terminals_dict = {t.name: t for t in self.terminals}

        ##

        if self.options.priority == 'invert':
            for rule in self.rules:
                if rule.options.priority is not None:
                    rule.options.priority = -rule.options.priority
            for term in self.terminals:
                term.priority = -term.priority
        ##

        ##

        ##

        elif self.options.priority is None:
            for rule in self.rules:
                if rule.options.priority is not None:
                    rule.options.priority = None
            for term in self.terminals:
                term.priority = 0

        ##

        self.lexer_conf = LexerConf(
                self.terminals, re_module, self.ignore_tokens, self.options.postlex,
                self.options.lexer_callbacks, self.options.g_regex_flags, use_bytes=self.options.use_bytes, strict=self.options.strict
            )

        if self.options.parser:
            self.parser = self._build_parser()
        elif lexer:
            self.lexer = self._build_lexer()

        if cache_fn:
            logger.debug('Saving grammar to cache: %s', cache_fn)
            try:
                with FS.open(cache_fn, 'wb') as f:
                    assert cache_sha256 is not None
                    f.write(cache_sha256.encode('utf8') + b'\n')
                    pickle.dump(used_files, f)
                    self.save(f, _LOAD_ALLOWED_OPTIONS)
            except IOError as e:
                logger.exception("Failed to save Lark to cache: %r.", cache_fn, e)

    if __doc__:
        __doc__ += "\n\n" + LarkOptions.OPTIONS_DOC

    __serialize_fields__ = 'parser', 'rules', 'options'

    def _build_lexer(self, dont_ignore: bool=False) -> BasicLexer:
        lexer_conf = self.lexer_conf
        if dont_ignore:
            from copy import copy
            lexer_conf = copy(lexer_conf)
            lexer_conf.ignore = ()
        return BasicLexer(lexer_conf)

    def _prepare_callbacks(self) -> None:
        self._callbacks = {}
        ##

        if self.options.ambiguity != 'forest':
            self._parse_tree_builder = ParseTreeBuilder(
                    self.rules,
                    self.options.tree_class or Tree,
                    self.options.propagate_positions,
                    self.options.parser != 'lalr' and self.options.ambiguity == 'explicit',
                    self.options.maybe_placeholders
                )
            self._callbacks = self._parse_tree_builder.create_callback(self.options.transformer)
        self._callbacks.update(_get_lexer_callbacks(self.options.transformer, self.terminals))

    def _build_parser(self) -> "ParsingFrontend":
        self._prepare_callbacks()
        _validate_frontend_args(self.options.parser, self.options.lexer)
        parser_conf = ParserConf(self.rules, self._callbacks, self.options.start)
        return _construct_parsing_frontend(
            self.options.parser,
            self.options.lexer,
            self.lexer_conf,
            parser_conf,
            options=self.options
        )

    def save(self, f, exclude_options: Collection[str] = ()) -> None:
        #--
        if self.options.parser != 'lalr':
            raise NotImplementedError("Lark.save() is only implemented for the LALR(1) parser.")
        data, m = self.memo_serialize([TerminalDef, Rule])
        if exclude_options:
            data["options"] = {n: v for n, v in data["options"].items() if n not in exclude_options}
        pickle.dump({'data': data, 'memo': m}, f, protocol=pickle.HIGHEST_PROTOCOL)

    @classmethod
    def load(cls: Type[_T], f) -> _T:
        #--
        inst = cls.__new__(cls)
        return inst._load(f)

    def _deserialize_lexer_conf(self, data: Dict[str, Any], memo: Dict[int, Union[TerminalDef, Rule]], options: LarkOptions) -> LexerConf:
        lexer_conf = LexerConf.deserialize(data['lexer_conf'], memo)
        lexer_conf.callbacks = options.lexer_callbacks or {}
        lexer_conf.re_module = regex if options.regex else re
        lexer_conf.use_bytes = options.use_bytes
        lexer_conf.g_regex_flags = options.g_regex_flags
        lexer_conf.skip_validation = True
        lexer_conf.postlex = options.postlex
        return lexer_conf

    def _load(self: _T, f: Any, **kwargs) -> _T:
        if isinstance(f, dict):
            d = f
        else:
            d = pickle.load(f)
        memo_json = d['memo']
        data = d['data']

        assert memo_json
        memo = SerializeMemoizer.deserialize(memo_json, {'Rule': Rule, 'TerminalDef': TerminalDef}, {})
        options = dict(data['options'])
        if (set(kwargs) - _LOAD_ALLOWED_OPTIONS) & set(LarkOptions._defaults):
            raise ConfigurationError("Some options are not allowed when loading a Parser: {}"
                             .format(set(kwargs) - _LOAD_ALLOWED_OPTIONS))
        options.update(kwargs)
        self.options = LarkOptions.deserialize(options, memo)
        self.rules = [Rule.deserialize(r, memo) for r in data['rules']]
        self.source_path = '<deserialized>'
        _validate_frontend_args(self.options.parser, self.options.lexer)
        self.lexer_conf = self._deserialize_lexer_conf(data['parser'], memo, self.options)
        self.terminals = self.lexer_conf.terminals
        self._prepare_callbacks()
        self._terminals_dict = {t.name: t for t in self.terminals}
        self.parser = _deserialize_parsing_frontend(
            data['parser'],
            memo,
            self.lexer_conf,
            self._callbacks,
            self.options,  ##

        )
        return self

    @classmethod
    def _load_from_dict(cls, data, memo, **kwargs):
        inst = cls.__new__(cls)
        return inst._load({'data': data, 'memo': memo}, **kwargs)

    @classmethod
    def open(cls: Type[_T], grammar_filename: str, rel_to: Optional[str]=None, **options) -> _T:
        #--
        if rel_to:
            basepath = os.path.dirname(rel_to)
            grammar_filename = os.path.join(basepath, grammar_filename)
        with open(grammar_filename, encoding='utf8') as f:
            return cls(f, **options)

    @classmethod
    def open_from_package(cls: Type[_T], package: str, grammar_path: str, search_paths: 'Sequence[str]'=[""], **options) -> _T:
        #--
        package_loader = FromPackageLoader(package, search_paths)
        full_path, text = package_loader(None, grammar_path)
        options.setdefault('source_path', full_path)
        options.setdefault('import_paths', [])
        options['import_paths'].append(package_loader)
        return cls(text, **options)

    def __repr__(self):
        return 'Lark(open(%r), parser=%r, lexer=%r, ...)' % (self.source_path, self.options.parser, self.options.lexer)


    def lex(self, text: str, dont_ignore: bool=False) -> Iterator[Token]:
        #--
        lexer: Lexer
        if not hasattr(self, 'lexer') or dont_ignore:
            lexer = self._build_lexer(dont_ignore)
        else:
            lexer = self.lexer
        lexer_thread = LexerThread.from_text(lexer, text)
        stream = lexer_thread.lex(None)
        if self.options.postlex:
            return self.options.postlex.process(stream)
        return stream

    def get_terminal(self, name: str) -> TerminalDef:
        #--
        return self._terminals_dict[name]

    def parse_interactive(self, text: Optional[str]=None, start: Optional[str]=None) -> 'InteractiveParser':
        #--
        return self.parser.parse_interactive(text, start=start)

    def parse(self, text: str, start: Optional[str]=None, on_error: 'Optional[Callable[[UnexpectedInput], bool]]'=None) -> 'ParseTree':
        #--
        return self.parser.parse(text, start=start, on_error=on_error)




class DedentError(LarkError):
    pass

class Indenter(PostLex, ABC):
    #--
    paren_level: int
    indent_level: List[int]

    def __init__(self) -> None:
        self.paren_level = 0
        self.indent_level = [0]
        assert self.tab_len > 0

    def handle_NL(self, token: Token) -> Iterator[Token]:
        if self.paren_level > 0:
            return

        yield token

        indent_str = token.rsplit('\n', 1)[1] ##

        indent = indent_str.count(' ') + indent_str.count('\t') * self.tab_len

        if indent > self.indent_level[-1]:
            self.indent_level.append(indent)
            yield Token.new_borrow_pos(self.INDENT_type, indent_str, token)
        else:
            while indent < self.indent_level[-1]:
                self.indent_level.pop()
                yield Token.new_borrow_pos(self.DEDENT_type, indent_str, token)

            if indent != self.indent_level[-1]:
                raise DedentError('Unexpected dedent to column %s. Expected dedent to %s' % (indent, self.indent_level[-1]))

    def _process(self, stream):
        for token in stream:
            if token.type == self.NL_type:
                yield from self.handle_NL(token)
            else:
                yield token

            if token.type in self.OPEN_PAREN_types:
                self.paren_level += 1
            elif token.type in self.CLOSE_PAREN_types:
                self.paren_level -= 1
                assert self.paren_level >= 0

        while len(self.indent_level) > 1:
            self.indent_level.pop()
            yield Token(self.DEDENT_type, '')

        assert self.indent_level == [0], self.indent_level

    def process(self, stream):
        self.paren_level = 0
        self.indent_level = [0]
        return self._process(stream)

    ##

    @property
    def always_accept(self):
        return (self.NL_type,)

    @property
    @abstractmethod
    def NL_type(self) -> str:
        #--
        raise NotImplementedError()

    @property
    @abstractmethod
    def OPEN_PAREN_types(self) -> List[str]:
        #--
        raise NotImplementedError()

    @property
    @abstractmethod
    def CLOSE_PAREN_types(self) -> List[str]:
        #--
        raise NotImplementedError()

    @property
    @abstractmethod
    def INDENT_type(self) -> str:
        #--
        raise NotImplementedError()

    @property
    @abstractmethod
    def DEDENT_type(self) -> str:
        #--
        raise NotImplementedError()

    @property
    @abstractmethod
    def tab_len(self) -> int:
        #--
        raise NotImplementedError()


class PythonIndenter(Indenter):
    #--

    NL_type = '_NEWLINE'
    OPEN_PAREN_types = ['LPAR', 'LSQB', 'LBRACE']
    CLOSE_PAREN_types = ['RPAR', 'RSQB', 'RBRACE']
    INDENT_type = '_INDENT'
    DEDENT_type = '_DEDENT'
    tab_len = 8


import pickle, zlib, base64
DATA = (
b''
)
DATA = pickle.loads(zlib.decompress(base64.b64decode(DATA)))
MEMO = (
b'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'
)
MEMO = pickle.loads(zlib.decompress(base64.b64decode(MEMO)))
Shift = 0
Reduce = 1
def Lark_StandAlone(**kwargs):
  return Lark._load_from_dict(DATA, MEMO, **kwargs)
