{% include "dpu_support.h" %}
{% for node_type in node_types %}
{{node_type.definition}}

{% endfor %}
{% for run_ability_function in run_ability_functions %}
void {{run_ability_function.full_name()}} ({{run_ability_function.node_type.name}} *node, uint32_t node_id, {{run_ability_function.walker_type.name}}* walker) {
{{run_ability_function.body}}
}
{% endfor %}

int main_kernel1() {
    // Barrier
    // barrier_wait(&my_barrier);


    // Get number of nodes and walkers assigned
    uint32_t num_nodes_assigned = DPU_INPUT_ARGUMENTS.num_nodes_assigned;

    #ifdef DEBUG
    printf("num_nodes_assigned = %u\n", num_nodes_assigned);
    #endif


    int cnt = 0;
    get_walker(walker_buffer);

    {% for walker_execution in walker_executions %}
    get_node(node_buffer, {{walker_execution.node_ptr}}); 
    {{walker_execution.func.full_name()}}(node_buffer, {{walker_execution.node_id}}, walker_buffer);
    save_node(node_buffer, {{walker_execution.node_ptr}});
    {% endfor %}

    save_walker(walker_buffer);
    #ifdef DEBUG
    printf("Ending.\n");
    print_container();
    #endif
    // mram_write(&sum, (__mram_ptr void*)(DPU_MRAM_HEAP_POINTER), aligned_malloc_size(sizeof(uint32_t)));
    return 0;
}

int main() { 
    // Kernel
    // return kernels[DPU_INPUT_ARGUMENTS.kernel](); 
    // Initialize memory
    unsigned int tasklet_id = me();

    #ifdef DEBUG
    printf("tasklet_id = %u\n", tasklet_id);
    #endif
    if (tasklet_id == 0){ // Initialize once the cycle counter
        mem_reset(); // Reset the heap
    }
    mem_init();
    return 0;
    return main_kernel1(); // Directly call the main_kernel1 function
}