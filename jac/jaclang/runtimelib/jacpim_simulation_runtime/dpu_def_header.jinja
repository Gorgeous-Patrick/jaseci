#include <stdint.h>
#include <stdio.h>
#include <defs.h>
#include <mram.h>
#include <alloc.h>
#include <perfcounter.h>
#include <barrier.h>

// #define DEBUG

void *node_buffer;
void *walker_buffer;
typedef struct __Metadata {
  {{metadata_definition}}
} Metadata;



typedef struct __ContainerObject{
{{container_object_definition}}
} ContainerObject;


{% for node_type in node_types %}
typedef struct __{{node_type.name}} {
{{node_type.definition}}
} {{node_type.name}};
{% endfor %}

{% for walker_type in walker_types %}
typedef struct __{{walker_type.name}} {
{{walker_type.definition}}
} {{walker_type.name}};
{% endfor %}

#define MAX_CONTAINER_BUFFER_SIZE 128
uint64_t container_buffer[MAX_CONTAINER_BUFFER_SIZE];
uint64_t container_buffer_size = 0;
void push_new_element_to_container(uint32_t id) {
    #ifdef DEBUG
    printf("Pushing new element to container: %u\n", id);
    #endif
    if (container_buffer_size < MAX_CONTAINER_BUFFER_SIZE) {
        container_buffer[0] = id;
    } else {
        #ifdef DEBUG
        printf("Container buffer overflow, cannot push new element: %u\n", id);
        #endif
    }
}

{% for run_ability_function in run_ability_functions %}
void {{run_ability_function.full_name()}} ({{run_ability_function.node_type.name}} *node, uint32_t node_id, {{run_ability_function.walker_type.name}}* walker) {
{{run_ability_function.body}}
}
{% endfor %}

void run_on_node(uint64_t walker_ptr, uint64_t node_ptr, uint64_t edge_num, uint64_t func_call) {
  {% for run_ability_function in run_ability_functions %}
  if (func_call == {{loop.index0}}) {
    {{run_ability_function.full_name()}}(node_ptr, 0, walker_ptr);
  }
  {% endfor %}
}

inline void mem_init() {
    node_buffer = mem_alloc({{max_node_size}});
    walker_buffer = mem_alloc({{max_walker_size}});
}